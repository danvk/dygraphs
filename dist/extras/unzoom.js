"use strict";

// Copyright (c) 2013 Google, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*global Dygraph:false */

/**
 * @fileoverview Plug-in for providing unzoom-on-hover.
 *
 * @author konigsberg@google.com (Robert Konigsberg)
 */
Dygraph.Plugins.Unzoom = function () {
  "use strict";

  /**
   * Create a new instance.
   *
   * @constructor
   */
  var unzoom = function unzoom() {
    this.button_ = null;

    // True when the mouse is over the canvas. Must be tracked
    // because the unzoom button state can change even when the
    // mouse-over state hasn't.
    this.over_ = false;
  };
  unzoom.prototype.toString = function () {
    return 'Unzoom Plugin';
  };
  unzoom.prototype.activate = function (g) {
    return {
      willDrawChart: this.willDrawChart
    };
  };
  unzoom.prototype.willDrawChart = function (e) {
    var g = e.dygraph;
    if (this.button_ !== null) {
      // short-circuit: show the button only when we're moused over, and zoomed in.
      var showButton = g.isZoomed() && this.over_;
      this.show(showButton);
      return;
    }
    this.button_ = document.createElement('button');
    this.button_.innerHTML = 'Reset Zoom';
    this.button_.style.display = 'none';
    this.button_.style.position = 'absolute';
    var area = g.plotter_.area;
    this.button_.style.top = area.y + 4 + 'px';
    this.button_.style.left = area.x + 4 + 'px';
    this.button_.style.zIndex = 11;
    var parent = g.graphDiv;
    parent.insertBefore(this.button_, parent.firstChild);
    var self = this;
    this.button_.onclick = function () {
      g.resetZoom();
    };
    g.addAndTrackEvent(parent, 'mouseover', function () {
      if (g.isZoomed()) {
        self.show(true);
      }
      self.over_ = true;
    });
    g.addAndTrackEvent(parent, 'mouseout', function () {
      self.show(false);
      self.over_ = false;
    });
  };
  unzoom.prototype.show = function (enabled) {
    this.button_.style.display = enabled ? '' : 'none';
  };
  unzoom.prototype.destroy = function () {
    this.button_.parentElement.removeChild(this.button_);
  };
  return unzoom;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEeWdyYXBoIiwiUGx1Z2lucyIsIlVuem9vbSIsInVuem9vbSIsImJ1dHRvbl8iLCJvdmVyXyIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiYWN0aXZhdGUiLCJnIiwid2lsbERyYXdDaGFydCIsImUiLCJkeWdyYXBoIiwic2hvd0J1dHRvbiIsImlzWm9vbWVkIiwic2hvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInN0eWxlIiwiZGlzcGxheSIsInBvc2l0aW9uIiwiYXJlYSIsInBsb3R0ZXJfIiwidG9wIiwieSIsImxlZnQiLCJ4IiwiekluZGV4IiwicGFyZW50IiwiZ3JhcGhEaXYiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwic2VsZiIsIm9uY2xpY2siLCJyZXNldFpvb20iLCJhZGRBbmRUcmFja0V2ZW50IiwiZW5hYmxlZCIsImRlc3Ryb3kiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZXh0cmFzL3Vuem9vbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTMgR29vZ2xlLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLypnbG9iYWwgRHlncmFwaDpmYWxzZSAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgUGx1Zy1pbiBmb3IgcHJvdmlkaW5nIHVuem9vbS1vbi1ob3Zlci5cbiAqXG4gKiBAYXV0aG9yIGtvbmlnc2JlcmdAZ29vZ2xlLmNvbSAoUm9iZXJ0IEtvbmlnc2JlcmcpXG4gKi9cbkR5Z3JhcGguUGx1Z2lucy5Vbnpvb20gPSAoZnVuY3Rpb24oKSB7XG5cbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZS5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICB2YXIgdW56b29tID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5idXR0b25fID0gbnVsbDtcblxuICAgIC8vIFRydWUgd2hlbiB0aGUgbW91c2UgaXMgb3ZlciB0aGUgY2FudmFzLiBNdXN0IGJlIHRyYWNrZWRcbiAgICAvLyBiZWNhdXNlIHRoZSB1bnpvb20gYnV0dG9uIHN0YXRlIGNhbiBjaGFuZ2UgZXZlbiB3aGVuIHRoZVxuICAgIC8vIG1vdXNlLW92ZXIgc3RhdGUgaGFzbid0LlxuICAgIHRoaXMub3Zlcl8gPSBmYWxzZTtcbiAgfTtcblxuICB1bnpvb20ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdVbnpvb20gUGx1Z2luJztcbiAgfTtcblxuICB1bnpvb20ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oZykge1xuICAgIHJldHVybiB7XG4gICAgICB3aWxsRHJhd0NoYXJ0OiB0aGlzLndpbGxEcmF3Q2hhcnRcbiAgICB9O1xuICB9O1xuXG4gIHVuem9vbS5wcm90b3R5cGUud2lsbERyYXdDaGFydCA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZyA9IGUuZHlncmFwaDtcblxuICAgIGlmICh0aGlzLmJ1dHRvbl8gIT09IG51bGwpIHtcbiAgICAgIC8vIHNob3J0LWNpcmN1aXQ6IHNob3cgdGhlIGJ1dHRvbiBvbmx5IHdoZW4gd2UncmUgbW91c2VkIG92ZXIsIGFuZCB6b29tZWQgaW4uXG4gICAgICB2YXIgc2hvd0J1dHRvbiA9IGcuaXNab29tZWQoKSAmJiB0aGlzLm92ZXJfO1xuICAgICAgdGhpcy5zaG93KHNob3dCdXR0b24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYnV0dG9uXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHRoaXMuYnV0dG9uXy5pbm5lckhUTUwgPSAnUmVzZXQgWm9vbSc7XG4gICAgdGhpcy5idXR0b25fLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5idXR0b25fLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICB2YXIgYXJlYSA9IGcucGxvdHRlcl8uYXJlYTtcbiAgICB0aGlzLmJ1dHRvbl8uc3R5bGUudG9wID0gKGFyZWEueSArIDQpICsgJ3B4JztcbiAgICB0aGlzLmJ1dHRvbl8uc3R5bGUubGVmdCA9IChhcmVhLnggKyA0KSArICdweCc7XG4gICAgdGhpcy5idXR0b25fLnN0eWxlLnpJbmRleCA9IDExO1xuICAgIHZhciBwYXJlbnQgPSBnLmdyYXBoRGl2O1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5idXR0b25fLCBwYXJlbnQuZmlyc3RDaGlsZCk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5idXR0b25fLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIGcucmVzZXRab29tKCk7XG4gICAgfTtcblxuICAgIGcuYWRkQW5kVHJhY2tFdmVudChwYXJlbnQsICdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChnLmlzWm9vbWVkKCkpIHtcbiAgICAgICAgc2VsZi5zaG93KHRydWUpO1xuICAgICAgfVxuICAgICAgc2VsZi5vdmVyXyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBnLmFkZEFuZFRyYWNrRXZlbnQocGFyZW50LCAnbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuc2hvdyhmYWxzZSk7XG4gICAgICBzZWxmLm92ZXJfID0gZmFsc2U7XG4gICAgfSk7XG4gIH07XG5cbiAgdW56b29tLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIHRoaXMuYnV0dG9uXy5zdHlsZS5kaXNwbGF5ID0gZW5hYmxlZCA/ICcnIDogJ25vbmUnO1xuICB9O1xuXG4gIHVuem9vbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYnV0dG9uXy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuYnV0dG9uXyk7XG4gIH07XG5cbiAgcmV0dXJuIHVuem9vbTtcblxufSkoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxNQUFNLEdBQUksWUFBVztFQUVuQyxZQUFZOztFQUVaO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRSxJQUFJQyxNQUFNLEdBQUcsU0FBVEEsTUFBTSxHQUFjO0lBQ3RCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUk7O0lBRW5CO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEtBQUs7RUFDcEIsQ0FBQztFQUVERixNQUFNLENBQUNHLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFlBQVc7SUFDckMsT0FBTyxlQUFlO0VBQ3hCLENBQUM7RUFFREosTUFBTSxDQUFDRyxTQUFTLENBQUNFLFFBQVEsR0FBRyxVQUFTQyxDQUFDLEVBQUU7SUFDdEMsT0FBTztNQUNMQyxhQUFhLEVBQUUsSUFBSSxDQUFDQTtJQUN0QixDQUFDO0VBQ0gsQ0FBQztFQUVEUCxNQUFNLENBQUNHLFNBQVMsQ0FBQ0ksYUFBYSxHQUFHLFVBQVNDLENBQUMsRUFBRTtJQUMzQyxJQUFJRixDQUFDLEdBQUdFLENBQUMsQ0FBQ0MsT0FBTztJQUVqQixJQUFJLElBQUksQ0FBQ1IsT0FBTyxLQUFLLElBQUksRUFBRTtNQUN6QjtNQUNBLElBQUlTLFVBQVUsR0FBR0osQ0FBQyxDQUFDSyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUNULEtBQUs7TUFDM0MsSUFBSSxDQUFDVSxJQUFJLENBQUNGLFVBQVUsQ0FBQztNQUNyQjtJQUNGO0lBRUEsSUFBSSxDQUFDVCxPQUFPLEdBQUdZLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUMvQyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2MsU0FBUyxHQUFHLFlBQVk7SUFDckMsSUFBSSxDQUFDZCxPQUFPLENBQUNlLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07SUFDbkMsSUFBSSxDQUFDaEIsT0FBTyxDQUFDZSxLQUFLLENBQUNFLFFBQVEsR0FBRyxVQUFVO0lBQ3hDLElBQUlDLElBQUksR0FBR2IsQ0FBQyxDQUFDYyxRQUFRLENBQUNELElBQUk7SUFDMUIsSUFBSSxDQUFDbEIsT0FBTyxDQUFDZSxLQUFLLENBQUNLLEdBQUcsR0FBSUYsSUFBSSxDQUFDRyxDQUFDLEdBQUcsQ0FBQyxHQUFJLElBQUk7SUFDNUMsSUFBSSxDQUFDckIsT0FBTyxDQUFDZSxLQUFLLENBQUNPLElBQUksR0FBSUosSUFBSSxDQUFDSyxDQUFDLEdBQUcsQ0FBQyxHQUFJLElBQUk7SUFDN0MsSUFBSSxDQUFDdkIsT0FBTyxDQUFDZSxLQUFLLENBQUNTLE1BQU0sR0FBRyxFQUFFO0lBQzlCLElBQUlDLE1BQU0sR0FBR3BCLENBQUMsQ0FBQ3FCLFFBQVE7SUFDdkJELE1BQU0sQ0FBQ0UsWUFBWSxDQUFDLElBQUksQ0FBQzNCLE9BQU8sRUFBRXlCLE1BQU0sQ0FBQ0csVUFBVSxDQUFDO0lBRXBELElBQUlDLElBQUksR0FBRyxJQUFJO0lBQ2YsSUFBSSxDQUFDN0IsT0FBTyxDQUFDOEIsT0FBTyxHQUFHLFlBQVc7TUFDaEN6QixDQUFDLENBQUMwQixTQUFTLEVBQUU7SUFDZixDQUFDO0lBRUQxQixDQUFDLENBQUMyQixnQkFBZ0IsQ0FBQ1AsTUFBTSxFQUFFLFdBQVcsRUFBRSxZQUFXO01BQ2pELElBQUlwQixDQUFDLENBQUNLLFFBQVEsRUFBRSxFQUFFO1FBQ2hCbUIsSUFBSSxDQUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQztNQUNqQjtNQUNBa0IsSUFBSSxDQUFDNUIsS0FBSyxHQUFHLElBQUk7SUFDbkIsQ0FBQyxDQUFDO0lBRUZJLENBQUMsQ0FBQzJCLGdCQUFnQixDQUFDUCxNQUFNLEVBQUUsVUFBVSxFQUFFLFlBQVc7TUFDaERJLElBQUksQ0FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUM7TUFDaEJrQixJQUFJLENBQUM1QixLQUFLLEdBQUcsS0FBSztJQUNwQixDQUFDLENBQUM7RUFDSixDQUFDO0VBRURGLE1BQU0sQ0FBQ0csU0FBUyxDQUFDUyxJQUFJLEdBQUcsVUFBU3NCLE9BQU8sRUFBRTtJQUN4QyxJQUFJLENBQUNqQyxPQUFPLENBQUNlLEtBQUssQ0FBQ0MsT0FBTyxHQUFHaUIsT0FBTyxHQUFHLEVBQUUsR0FBRyxNQUFNO0VBQ3BELENBQUM7RUFFRGxDLE1BQU0sQ0FBQ0csU0FBUyxDQUFDZ0MsT0FBTyxHQUFHLFlBQVc7SUFDcEMsSUFBSSxDQUFDbEMsT0FBTyxDQUFDbUMsYUFBYSxDQUFDQyxXQUFXLENBQUMsSUFBSSxDQUFDcEMsT0FBTyxDQUFDO0VBQ3RELENBQUM7RUFFRCxPQUFPRCxNQUFNO0FBRWYsQ0FBQyxFQUFHIn0=