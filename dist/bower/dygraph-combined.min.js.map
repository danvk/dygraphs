{"version":3,"sources":["annotations.js","axes.js","chart-labels.js","grid.js","legend.js","range-selector.js","dygraph-plugin-install.js","datahandler.js","default.js","default-fractions.js","bars.js","bars-error.js","bars-custom.js","bars-fractions.js"],"names":[],"mappings":"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","file":"dygraph-combined.min.js","sourcesContent":["/**\n * @license\n * Copyright 2012 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/*global Dygraph:false */\n\nDygraph.Plugins.Annotations = (function() {\n\n\"use strict\";\n\n/**\nCurrent bits of jankiness:\n- Uses dygraph.layout_ to get the parsed annotations.\n- Uses dygraph.plotter_.area\n\nIt would be nice if the plugin didn't require so much special support inside\nthe core dygraphs classes, but annotations involve quite a bit of parsing and\nlayout.\n\nTODO(danvk): cache DOM elements.\n\n*/\n\nvar annotations = function() {\n  this.annotations_ = [];\n};\n\nannotations.prototype.toString = function() {\n  return \"Annotations Plugin\";\n};\n\nannotations.prototype.activate = function(g) {\n  return {\n    clearChart: this.clearChart,\n    didDrawChart: this.didDrawChart\n  };\n};\n\nannotations.prototype.detachLabels = function() {\n  for (var i = 0; i < this.annotations_.length; i++) {\n    var a = this.annotations_[i];\n    if (a.parentNode) a.parentNode.removeChild(a);\n    this.annotations_[i] = null;\n  }\n  this.annotations_ = [];\n};\n\nannotations.prototype.clearChart = function(e) {\n  this.detachLabels();\n};\n\nannotations.prototype.didDrawChart = function(e) {\n  var g = e.dygraph;\n\n  // Early out in the (common) case of zero annotations.\n  var points = g.layout_.annotated_points;\n  if (!points || points.length === 0) return;\n\n  var containerDiv = e.canvas.parentNode;\n  var annotationStyle = {\n    \"position\": \"absolute\",\n    \"fontSize\": g.getOption('axisLabelFontSize') + \"px\",\n    \"zIndex\": 10,\n    \"overflow\": \"hidden\"\n  };\n\n  var bindEvt = function(eventName, classEventName, pt) {\n    return function(annotation_event) {\n      var a = pt.annotation;\n      if (a.hasOwnProperty(eventName)) {\n        a[eventName](a, pt, g, annotation_event);\n      } else if (g.getOption(classEventName)) {\n        g.getOption(classEventName)(a, pt, g, annotation_event );\n      }\n    };\n  };\n\n  // Add the annotations one-by-one.\n  var area = e.dygraph.plotter_.area;\n\n  // x-coord to sum of previous annotation's heights (used for stacking).\n  var xToUsedHeight = {};\n\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n    if (p.canvasx < area.x || p.canvasx > area.x + area.w ||\n        p.canvasy < area.y || p.canvasy > area.y + area.h) {\n      continue;\n    }\n\n    var a = p.annotation;\n    var tick_height = 6;\n    if (a.hasOwnProperty(\"tickHeight\")) {\n      tick_height = a.tickHeight;\n    }\n\n    var div = document.createElement(\"div\");\n    for (var name in annotationStyle) {\n      if (annotationStyle.hasOwnProperty(name)) {\n        div.style[name] = annotationStyle[name];\n      }\n    }\n    if (!a.hasOwnProperty('icon')) {\n      div.className = \"dygraphDefaultAnnotation\";\n    }\n    if (a.hasOwnProperty('cssClass')) {\n      div.className += \" \" + a.cssClass;\n    }\n\n    var width = a.hasOwnProperty('width') ? a.width : 16;\n    var height = a.hasOwnProperty('height') ? a.height : 16;\n    if (a.hasOwnProperty('icon')) {\n      var img = document.createElement(\"img\");\n      img.src = a.icon;\n      img.width = width;\n      img.height = height;\n      div.appendChild(img);\n    } else if (p.annotation.hasOwnProperty('shortText')) {\n      div.appendChild(document.createTextNode(p.annotation.shortText));\n    }\n    var left = p.canvasx - width / 2;\n    div.style.left = left + \"px\";\n    var divTop = 0;\n    if (a.attachAtBottom) {\n      var y = (area.y + area.h - height - tick_height);\n      if (xToUsedHeight[left]) {\n        y -= xToUsedHeight[left];\n      } else {\n        xToUsedHeight[left] = 0;\n      }\n      xToUsedHeight[left] += (tick_height + height);\n      divTop = y;\n    } else {\n      divTop = p.canvasy - height - tick_height;\n    }\n    div.style.top = divTop + \"px\";\n    div.style.width = width + \"px\";\n    div.style.height = height + \"px\";\n    div.title = p.annotation.text;\n    div.style.color = g.colorsMap_[p.name];\n    div.style.borderColor = g.colorsMap_[p.name];\n    a.div = div;\n\n    g.addAndTrackEvent(div, 'click',\n        bindEvt('clickHandler', 'annotationClickHandler', p, this));\n    g.addAndTrackEvent(div, 'mouseover',\n        bindEvt('mouseOverHandler', 'annotationMouseOverHandler', p, this));\n    g.addAndTrackEvent(div, 'mouseout',\n        bindEvt('mouseOutHandler', 'annotationMouseOutHandler', p, this));\n    g.addAndTrackEvent(div, 'dblclick',\n        bindEvt('dblClickHandler', 'annotationDblClickHandler', p, this));\n\n    containerDiv.appendChild(div);\n    this.annotations_.push(div);\n\n    var ctx = e.drawingContext;\n    ctx.save();\n    ctx.strokeStyle = g.colorsMap_[p.name];\n    ctx.beginPath();\n    if (!a.attachAtBottom) {\n      ctx.moveTo(p.canvasx, p.canvasy);\n      ctx.lineTo(p.canvasx, p.canvasy - 2 - tick_height);\n    } else {\n      var y = divTop + height;\n      ctx.moveTo(p.canvasx, y);\n      ctx.lineTo(p.canvasx, y + tick_height);\n    }\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n};\n\nannotations.prototype.destroy = function() {\n  this.detachLabels();\n};\n\nreturn annotations;\n\n})();\n","/**\n * @license\n * Copyright 2012 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/*global Dygraph:false */\n\nDygraph.Plugins.Axes = (function() {\n\n'use strict';\n\n/*\nBits of jankiness:\n- Direct layout access\n- Direct area access\n- Should include calculation of ticks, not just the drawing.\n\nOptions left to make axis-friendly.\n  ('drawAxesAtZero')\n  ('xAxisHeight')\n*/\n\n/**\n * Draws the axes. This includes the labels on the x- and y-axes, as well\n * as the tick marks on the axes.\n * It does _not_ draw the grid lines which span the entire chart.\n */\nvar axes = function() {\n  this.xlabels_ = [];\n  this.ylabels_ = [];\n};\n\naxes.prototype.toString = function() {\n  return 'Axes Plugin';\n};\n\naxes.prototype.activate = function(g) {\n  return {\n    layout: this.layout,\n    clearChart: this.clearChart,\n    willDrawChart: this.willDrawChart\n  };\n};\n\naxes.prototype.layout = function(e) {\n  var g = e.dygraph;\n\n  if (g.getOptionForAxis('drawAxis', 'y')) {\n    var w = g.getOptionForAxis('axisLabelWidth', 'y') + 2 * g.getOptionForAxis('axisTickSize', 'y');\n    e.reserveSpaceLeft(w);\n  }\n\n  if (g.getOptionForAxis('drawAxis', 'x')) {\n    var h;\n    // NOTE: I think this is probably broken now, since g.getOption() now\n    // hits the dictionary. (That is, g.getOption('xAxisHeight') now always\n    // has a value.)\n    if (g.getOption('xAxisHeight')) {\n      h = g.getOption('xAxisHeight');\n    } else {\n      h = g.getOptionForAxis('axisLabelFontSize', 'x') + 2 * g.getOptionForAxis('axisTickSize', 'x');\n    }\n    e.reserveSpaceBottom(h);\n  }\n\n  if (g.numAxes() == 2) {\n    if (g.getOptionForAxis('drawAxis', 'y2')) {\n      var w = g.getOptionForAxis('axisLabelWidth', 'y2') + 2 * g.getOptionForAxis('axisTickSize', 'y2');\n      e.reserveSpaceRight(w);\n    }\n  } else if (g.numAxes() > 2) {\n    g.error('Only two y-axes are supported at this time. (Trying ' +\n            'to use ' + g.numAxes() + ')');\n  }\n};\n\naxes.prototype.detachLabels = function() {\n  function removeArray(ary) {\n    for (var i = 0; i < ary.length; i++) {\n      var el = ary[i];\n      if (el.parentNode) el.parentNode.removeChild(el);\n    }\n  }\n\n  removeArray(this.xlabels_);\n  removeArray(this.ylabels_);\n  this.xlabels_ = [];\n  this.ylabels_ = [];\n};\n\naxes.prototype.clearChart = function(e) {\n  this.detachLabels();\n};\n\naxes.prototype.willDrawChart = function(e) {\n  var g = e.dygraph;\n\n  if (!g.getOptionForAxis('drawAxis', 'x') &&\n      !g.getOptionForAxis('drawAxis', 'y') &&\n      !g.getOptionForAxis('drawAxis', 'y2')) {\n    return;\n  }\n  \n  // Round pixels to half-integer boundaries for crisper drawing.\n  function halfUp(x)  { return Math.round(x) + 0.5; }\n  function halfDown(y){ return Math.round(y) - 0.5; }\n\n  var context = e.drawingContext;\n  var containerDiv = e.canvas.parentNode;\n  var canvasWidth = g.width_;  // e.canvas.width is affected by pixel ratio.\n  var canvasHeight = g.height_;\n\n  var label, x, y, tick, i;\n\n  var makeLabelStyle = function(axis) {\n    return {\n      position: 'absolute',\n      fontSize: g.getOptionForAxis('axisLabelFontSize', axis) + 'px',\n      zIndex: 10,\n      color: g.getOptionForAxis('axisLabelColor', axis),\n      width: g.getOptionForAxis('axisLabelWidth', axis) + 'px',\n      // height: g.getOptionForAxis('axisLabelFontSize', 'x') + 2 + \"px\",\n      lineHeight: 'normal',  // Something other than \"normal\" line-height screws up label positioning.\n      overflow: 'hidden'\n    };\n  };\n\n  var labelStyles = {\n    x : makeLabelStyle('x'),\n    y : makeLabelStyle('y'),\n    y2 : makeLabelStyle('y2')\n  };\n\n  var makeDiv = function(txt, axis, prec_axis) {\n    /*\n     * This seems to be called with the following three sets of axis/prec_axis:\n     * x: undefined\n     * y: y1\n     * y: y2\n     */\n    var div = document.createElement('div');\n    var labelStyle = labelStyles[prec_axis == 'y2' ? 'y2' : axis];\n    for (var name in labelStyle) {\n      if (labelStyle.hasOwnProperty(name)) {\n        div.style[name] = labelStyle[name];\n      }\n    }\n    var inner_div = document.createElement('div');\n    inner_div.className = 'dygraph-axis-label' +\n                          ' dygraph-axis-label-' + axis +\n                          (prec_axis ? ' dygraph-axis-label-' + prec_axis : '');\n    inner_div.innerHTML = txt;\n    div.appendChild(inner_div);\n    return div;\n  };\n\n  // axis lines\n  context.save();\n\n  var layout = g.layout_;\n  var area = e.dygraph.plotter_.area;\n\n  // Helper for repeated axis-option accesses.\n  var makeOptionGetter = function(axis) {\n    return function(option) {\n      return g.getOptionForAxis(option, axis);\n    };\n  };\n\n  if (g.getOptionForAxis('drawAxis', 'y')) {\n    if (layout.yticks && layout.yticks.length > 0) {\n      var num_axes = g.numAxes();\n      var getOptions = [makeOptionGetter('y'), makeOptionGetter('y2')];\n      for (i = 0; i < layout.yticks.length; i++) {\n        tick = layout.yticks[i];\n        if (typeof(tick) == 'function') return;  // <-- when would this happen?\n        x = area.x;\n        var sgn = 1;\n        var prec_axis = 'y1';\n        var getAxisOption = getOptions[0];\n        if (tick[0] == 1) {  // right-side y-axis\n          x = area.x + area.w;\n          sgn = -1;\n          prec_axis = 'y2';\n          getAxisOption = getOptions[1];\n        }\n        var fontSize = getAxisOption('axisLabelFontSize');\n        y = area.y + tick[1] * area.h;\n\n        /* Tick marks are currently clipped, so don't bother drawing them.\n        context.beginPath();\n        context.moveTo(halfUp(x), halfDown(y));\n        context.lineTo(halfUp(x - sgn * this.attr_('axisTickSize')), halfDown(y));\n        context.closePath();\n        context.stroke();\n        */\n\n        label = makeDiv(tick[2], 'y', num_axes == 2 ? prec_axis : null);\n        var top = (y - fontSize / 2);\n        if (top < 0) top = 0;\n\n        if (top + fontSize + 3 > canvasHeight) {\n          label.style.bottom = '0';\n        } else {\n          label.style.top = top + 'px';\n        }\n        if (tick[0] === 0) {\n          label.style.left = (area.x - getAxisOption('axisLabelWidth') - getAxisOption('axisTickSize')) + 'px';\n          label.style.textAlign = 'right';\n        } else if (tick[0] == 1) {\n          label.style.left = (area.x + area.w +\n                              getAxisOption('axisTickSize')) + 'px';\n          label.style.textAlign = 'left';\n        }\n        label.style.width = getAxisOption('axisLabelWidth') + 'px';\n        containerDiv.appendChild(label);\n        this.ylabels_.push(label);\n      }\n\n      // The lowest tick on the y-axis often overlaps with the leftmost\n      // tick on the x-axis. Shift the bottom tick up a little bit to\n      // compensate if necessary.\n      var bottomTick = this.ylabels_[0];\n      // Interested in the y2 axis also?\n      var fontSize = g.getOptionForAxis('axisLabelFontSize', 'y');\n      var bottom = parseInt(bottomTick.style.top, 10) + fontSize;\n      if (bottom > canvasHeight - fontSize) {\n        bottomTick.style.top = (parseInt(bottomTick.style.top, 10) -\n            fontSize / 2) + 'px';\n      }\n    }\n\n    // draw a vertical line on the left to separate the chart from the labels.\n    var axisX;\n    if (g.getOption('drawAxesAtZero')) {\n      var r = g.toPercentXCoord(0);\n      if (r > 1 || r < 0 || isNaN(r)) r = 0;\n      axisX = halfUp(area.x + r * area.w);\n    } else {\n      axisX = halfUp(area.x);\n    }\n\n    context.strokeStyle = g.getOptionForAxis('axisLineColor', 'y');\n    context.lineWidth = g.getOptionForAxis('axisLineWidth', 'y');\n\n    context.beginPath();\n    context.moveTo(axisX, halfDown(area.y));\n    context.lineTo(axisX, halfDown(area.y + area.h));\n    context.closePath();\n    context.stroke();\n\n    // if there's a secondary y-axis, draw a vertical line for that, too.\n    if (g.numAxes() == 2) {\n      context.strokeStyle = g.getOptionForAxis('axisLineColor', 'y2');\n      context.lineWidth = g.getOptionForAxis('axisLineWidth', 'y2');\n      context.beginPath();\n      context.moveTo(halfDown(area.x + area.w), halfDown(area.y));\n      context.lineTo(halfDown(area.x + area.w), halfDown(area.y + area.h));\n      context.closePath();\n      context.stroke();\n    }\n  }\n\n  if (g.getOptionForAxis('drawAxis', 'x')) {\n    if (layout.xticks) {\n      var getAxisOption = makeOptionGetter('x');\n      for (i = 0; i < layout.xticks.length; i++) {\n        tick = layout.xticks[i];\n        x = area.x + tick[0] * area.w;\n        y = area.y + area.h;\n\n        /* Tick marks are currently clipped, so don't bother drawing them.\n        context.beginPath();\n        context.moveTo(halfUp(x), halfDown(y));\n        context.lineTo(halfUp(x), halfDown(y + this.attr_('axisTickSize')));\n        context.closePath();\n        context.stroke();\n        */\n\n        label = makeDiv(tick[1], 'x');\n        label.style.textAlign = 'center';\n        label.style.top = (y + getAxisOption('axisTickSize')) + 'px';\n\n        var left = (x - getAxisOption('axisLabelWidth')/2);\n        if (left + getAxisOption('axisLabelWidth') > canvasWidth) {\n          left = canvasWidth - getAxisOption('axisLabelWidth');\n          label.style.textAlign = 'right';\n        }\n        if (left < 0) {\n          left = 0;\n          label.style.textAlign = 'left';\n        }\n\n        label.style.left = left + 'px';\n        label.style.width = getAxisOption('axisLabelWidth') + 'px';\n        containerDiv.appendChild(label);\n        this.xlabels_.push(label);\n      }\n    }\n\n    context.strokeStyle = g.getOptionForAxis('axisLineColor', 'x');\n    context.lineWidth = g.getOptionForAxis('axisLineWidth', 'x');\n    context.beginPath();\n    var axisY;\n    if (g.getOption('drawAxesAtZero')) {\n      var r = g.toPercentYCoord(0, 0);\n      if (r > 1 || r < 0) r = 1;\n      axisY = halfDown(area.y + r * area.h);\n    } else {\n      axisY = halfDown(area.y + area.h);\n    }\n    context.moveTo(halfUp(area.x), axisY);\n    context.lineTo(halfUp(area.x + area.w), axisY);\n    context.closePath();\n    context.stroke();\n  }\n\n  context.restore();\n};\n\nreturn axes;\n})();\n","/**\n * @license\n * Copyright 2012 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n/*global Dygraph:false */\n\nDygraph.Plugins.ChartLabels = (function() {\n\n\"use strict\";\n\n// TODO(danvk): move chart label options out of dygraphs and into the plugin.\n// TODO(danvk): only tear down & rebuild the DIVs when it's necessary.\n\nvar chart_labels = function() {\n  this.title_div_ = null;\n  this.xlabel_div_ = null;\n  this.ylabel_div_ = null;\n  this.y2label_div_ = null;\n};\n\nchart_labels.prototype.toString = function() {\n  return \"ChartLabels Plugin\";\n};\n\nchart_labels.prototype.activate = function(g) {\n  return {\n    layout: this.layout,\n    // clearChart: this.clearChart,\n    didDrawChart: this.didDrawChart\n  };\n};\n\n// QUESTION: should there be a plugin-utils.js?\nvar createDivInRect = function(r) {\n  var div = document.createElement('div');\n  div.style.position = 'absolute';\n  div.style.left = r.x + 'px';\n  div.style.top = r.y + 'px';\n  div.style.width = r.w + 'px';\n  div.style.height = r.h + 'px';\n  return div;\n};\n\n// Detach and null out any existing nodes.\nchart_labels.prototype.detachLabels_ = function() {\n  var els = [ this.title_div_,\n              this.xlabel_div_,\n              this.ylabel_div_,\n              this.y2label_div_ ];\n  for (var i = 0; i < els.length; i++) {\n    var el = els[i];\n    if (!el) continue;\n    if (el.parentNode) el.parentNode.removeChild(el);\n  }\n\n  this.title_div_ = null;\n  this.xlabel_div_ = null;\n  this.ylabel_div_ = null;\n  this.y2label_div_ = null;\n};\n\nvar createRotatedDiv = function(g, box, axis, classes, html) {\n  // TODO(danvk): is this outer div actually necessary?\n  var div = document.createElement(\"div\");\n  div.style.position = 'absolute';\n  if (axis == 1) {\n    // NOTE: this is cheating. Should be positioned relative to the box.\n    div.style.left = '0px';\n  } else {\n    div.style.left = box.x + 'px';\n  }\n  div.style.top = box.y + 'px';\n  div.style.width = box.w + 'px';\n  div.style.height = box.h + 'px';\n  div.style.fontSize = (g.getOption('yLabelWidth') - 2) + 'px';\n\n  var inner_div = document.createElement(\"div\");\n  inner_div.style.position = 'absolute';\n  inner_div.style.width = box.h + 'px';\n  inner_div.style.height = box.w + 'px';\n  inner_div.style.top = (box.h / 2 - box.w / 2) + 'px';\n  inner_div.style.left = (box.w / 2 - box.h / 2) + 'px';\n  inner_div.style.textAlign = 'center';\n\n  // CSS rotation is an HTML5 feature which is not standardized. Hence every\n  // browser has its own name for the CSS style.\n  var val = 'rotate(' + (axis == 1 ? '-' : '') + '90deg)';\n  inner_div.style.transform = val;        // HTML5\n  inner_div.style.WebkitTransform = val;  // Safari/Chrome\n  inner_div.style.MozTransform = val;     // Firefox\n  inner_div.style.OTransform = val;       // Opera\n  inner_div.style.msTransform = val;      // IE9\n\n  var class_div = document.createElement(\"div\");\n  class_div.className = classes;\n  class_div.innerHTML = html;\n\n  inner_div.appendChild(class_div);\n  div.appendChild(inner_div);\n  return div;\n};\n\nchart_labels.prototype.layout = function(e) {\n  this.detachLabels_();\n\n  var g = e.dygraph;\n  var div = e.chart_div;\n  if (g.getOption('title')) {\n    // QUESTION: should this return an absolutely-positioned div instead?\n    var title_rect = e.reserveSpaceTop(g.getOption('titleHeight'));\n    this.title_div_ = createDivInRect(title_rect);\n    this.title_div_.style.textAlign = 'center';\n    this.title_div_.style.fontSize = (g.getOption('titleHeight') - 8) + 'px';\n    this.title_div_.style.fontWeight = 'bold';\n    this.title_div_.style.zIndex = 10;\n\n    var class_div = document.createElement(\"div\");\n    class_div.className = 'dygraph-label dygraph-title';\n    class_div.innerHTML = g.getOption('title');\n    this.title_div_.appendChild(class_div);\n    div.appendChild(this.title_div_);\n  }\n\n  if (g.getOption('xlabel')) {\n    var x_rect = e.reserveSpaceBottom(g.getOption('xLabelHeight'));\n    this.xlabel_div_ = createDivInRect(x_rect);\n    this.xlabel_div_.style.textAlign = 'center';\n    this.xlabel_div_.style.fontSize = (g.getOption('xLabelHeight') - 2) + 'px';\n\n    var class_div = document.createElement(\"div\");\n    class_div.className = 'dygraph-label dygraph-xlabel';\n    class_div.innerHTML = g.getOption('xlabel');\n    this.xlabel_div_.appendChild(class_div);\n    div.appendChild(this.xlabel_div_);\n  }\n\n  if (g.getOption('ylabel')) {\n    // It would make sense to shift the chart here to make room for the y-axis\n    // label, but the default yAxisLabelWidth is large enough that this results\n    // in overly-padded charts. The y-axis label should fit fine. If it\n    // doesn't, the yAxisLabelWidth option can be increased.\n    var y_rect = e.reserveSpaceLeft(0);\n\n    this.ylabel_div_ = createRotatedDiv(\n        g, y_rect,\n        1,  // primary (left) y-axis\n        'dygraph-label dygraph-ylabel',\n        g.getOption('ylabel'));\n    div.appendChild(this.ylabel_div_);\n  }\n\n  if (g.getOption('y2label') && g.numAxes() == 2) {\n    // same logic applies here as for ylabel.\n    var y2_rect = e.reserveSpaceRight(0);\n    this.y2label_div_ = createRotatedDiv(\n        g, y2_rect,\n        2,  // secondary (right) y-axis\n        'dygraph-label dygraph-y2label',\n        g.getOption('y2label'));\n    div.appendChild(this.y2label_div_);\n  }\n};\n\nchart_labels.prototype.didDrawChart = function(e) {\n  var g = e.dygraph;\n  if (this.title_div_) {\n    this.title_div_.children[0].innerHTML = g.getOption('title');\n  }\n  if (this.xlabel_div_) {\n    this.xlabel_div_.children[0].innerHTML = g.getOption('xlabel');\n  }\n  if (this.ylabel_div_) {\n    this.ylabel_div_.children[0].children[0].innerHTML = g.getOption('ylabel');\n  }\n  if (this.y2label_div_) {\n    this.y2label_div_.children[0].children[0].innerHTML = g.getOption('y2label');\n  }\n};\n\nchart_labels.prototype.clearChart = function() {\n};\n\nchart_labels.prototype.destroy = function() {\n  this.detachLabels_();\n};\n\n\nreturn chart_labels;\n})();\n","/**\n * @license\n * Copyright 2012 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n/*global Dygraph:false */\n\nDygraph.Plugins.Grid = (function() {\n\n/*\n\nCurrent bits of jankiness:\n- Direct layout access\n- Direct area access\n\n*/\n\n\"use strict\";\n\n\n/**\n * Draws the gridlines, i.e. the gray horizontal & vertical lines running the\n * length of the chart.\n *\n * @constructor\n */\nvar grid = function() {\n};\n\ngrid.prototype.toString = function() {\n  return \"Gridline Plugin\";\n};\n\ngrid.prototype.activate = function(g) {\n  return {\n    willDrawChart: this.willDrawChart\n  };\n};\n\ngrid.prototype.willDrawChart = function(e) {\n  // Draw the new X/Y grid. Lines appear crisper when pixels are rounded to\n  // half-integers. This prevents them from drawing in two rows/cols.\n  var g = e.dygraph;\n  var ctx = e.drawingContext;\n  var layout = g.layout_;\n  var area = e.dygraph.plotter_.area;\n\n  function halfUp(x)  { return Math.round(x) + 0.5; }\n  function halfDown(y){ return Math.round(y) - 0.5; }\n\n  var x, y, i, ticks;\n  if (g.getOptionForAxis('drawGrid', 'y')) {\n    var axes = [\"y\", \"y2\"];\n    var strokeStyles = [], lineWidths = [], drawGrid = [], stroking = [], strokePattern = [];\n    for (var i = 0; i < axes.length; i++) {\n      drawGrid[i] = g.getOptionForAxis('drawGrid', axes[i]);\n      if (drawGrid[i]) {\n        strokeStyles[i] = g.getOptionForAxis('gridLineColor', axes[i]);\n        lineWidths[i] = g.getOptionForAxis('gridLineWidth', axes[i]);\n        strokePattern[i] = g.getOptionForAxis('gridLinePattern', axes[i]);\n        stroking[i] = strokePattern[i] && (strokePattern[i].length >= 2);\n      }\n    }\n    ticks = layout.yticks;\n    ctx.save();\n    // draw grids for the different y axes\n    for (i = 0; i < ticks.length; i++) {\n      var axis = ticks[i][0];\n      if(drawGrid[axis]) {\n        if (stroking[axis]) {\n          ctx.installPattern(strokePattern[axis]);\n        }\n        ctx.strokeStyle = strokeStyles[axis];\n        ctx.lineWidth = lineWidths[axis];\n\n        x = halfUp(area.x);\n        y = halfDown(area.y + ticks[i][1] * area.h);\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + area.w, y);\n        ctx.closePath();\n        ctx.stroke();\n\n        if (stroking[axis]) {\n          ctx.uninstallPattern();\n        }\n      }\n    }\n    ctx.restore();\n  }\n\n  // draw grid for x axis\n  if (g.getOptionForAxis('drawGrid', 'x')) {\n    ticks = layout.xticks;\n    ctx.save();\n    var strokePattern = g.getOptionForAxis('gridLinePattern', 'x');\n    var stroking = strokePattern && (strokePattern.length >= 2);\n    if (stroking) {\n      ctx.installPattern(strokePattern);\n    }\n    ctx.strokeStyle = g.getOptionForAxis('gridLineColor', 'x');\n    ctx.lineWidth = g.getOptionForAxis('gridLineWidth', 'x');\n    for (i = 0; i < ticks.length; i++) {\n      x = halfUp(area.x + ticks[i][0] * area.w);\n      y = halfDown(area.y + area.h);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x, area.y);\n      ctx.closePath();\n      ctx.stroke();\n    }\n    if (stroking) {\n      ctx.uninstallPattern();\n    }\n    ctx.restore();\n  }\n};\n\ngrid.prototype.destroy = function() {\n};\n\nreturn grid;\n\n})();\n","/**\n * @license\n * Copyright 2012 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n/*global Dygraph:false */\n\nDygraph.Plugins.Legend = (function() {\n/*\nCurrent bits of jankiness:\n- Uses two private APIs:\n    1. Dygraph.optionsViewForAxis_\n    2. dygraph.plotter_.area\n- Registers for a \"predraw\" event, which should be renamed.\n- I call calculateEmWidthInDiv more often than needed.\n*/\n\n/*global Dygraph:false */\n\"use strict\";\n\n\n/**\n * Creates the legend, which appears when the user hovers over the chart.\n * The legend can be either a user-specified or generated div.\n *\n * @constructor\n */\nvar legend = function() {\n  this.legend_div_ = null;\n  this.is_generated_div_ = false;  // do we own this div, or was it user-specified?\n};\n\nlegend.prototype.toString = function() {\n  return \"Legend Plugin\";\n};\n\n// (defined below)\nvar generateLegendDashHTML;\n\n/**\n * This is called during the dygraph constructor, after options have been set\n * but before the data is available.\n *\n * Proper tasks to do here include:\n * - Reading your own options\n * - DOM manipulation\n * - Registering event listeners\n *\n * @param {Dygraph} g Graph instance.\n * @return {object.<string, function(ev)>} Mapping of event names to callbacks.\n */\nlegend.prototype.activate = function(g) {\n  var div;\n  var divWidth = g.getOption('labelsDivWidth');\n\n  var userLabelsDiv = g.getOption('labelsDiv');\n  if (userLabelsDiv && null !== userLabelsDiv) {\n    if (typeof(userLabelsDiv) == \"string\" || userLabelsDiv instanceof String) {\n      div = document.getElementById(userLabelsDiv);\n    } else {\n      div = userLabelsDiv;\n    }\n  } else {\n    // Default legend styles. These can be overridden in CSS by adding\n    // \"!important\" after your rule, e.g. \"left: 30px !important;\"\n    var messagestyle = {\n      \"position\": \"absolute\",\n      \"fontSize\": \"14px\",\n      \"zIndex\": 10,\n      \"width\": divWidth + \"px\",\n      \"top\": \"0px\",\n      \"left\": (g.size().width - divWidth - 2) + \"px\",\n      \"background\": \"white\",\n      \"lineHeight\": \"normal\",\n      \"textAlign\": \"left\",\n      \"overflow\": \"hidden\"};\n\n    // TODO(danvk): get rid of labelsDivStyles? CSS is better.\n    Dygraph.update(messagestyle, g.getOption('labelsDivStyles'));\n    div = document.createElement(\"div\");\n    div.className = \"dygraph-legend\";\n    for (var name in messagestyle) {\n      if (!messagestyle.hasOwnProperty(name)) continue;\n\n      try {\n        div.style[name] = messagestyle[name];\n      } catch (e) {\n        console.warn(\"You are using unsupported css properties for your \" +\n            \"browser in labelsDivStyles\");\n      }\n    }\n\n    // TODO(danvk): come up with a cleaner way to expose this.\n    g.graphDiv.appendChild(div);\n    this.is_generated_div_ = true;\n  }\n\n  this.legend_div_ = div;\n  this.one_em_width_ = 10;  // just a guess, will be updated.\n\n  return {\n    select: this.select,\n    deselect: this.deselect,\n    // TODO(danvk): rethink the name \"predraw\" before we commit to it in any API.\n    predraw: this.predraw,\n    didDrawChart: this.didDrawChart\n  };\n};\n\n// Needed for dashed lines.\nvar calculateEmWidthInDiv = function(div) {\n  var sizeSpan = document.createElement('span');\n  sizeSpan.setAttribute('style', 'margin: 0; padding: 0 0 0 1em; border: 0;');\n  div.appendChild(sizeSpan);\n  var oneEmWidth=sizeSpan.offsetWidth;\n  div.removeChild(sizeSpan);\n  return oneEmWidth;\n};\n\nvar escapeHTML = function(str) {\n  return str.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n};\n\nlegend.prototype.select = function(e) {\n  var xValue = e.selectedX;\n  var points = e.selectedPoints;\n  var row = e.selectedRow;\n\n  var legendMode = e.dygraph.getOption('legend');\n  if (legendMode === 'never') {\n    this.legend_div_.style.display = 'none';\n    return;\n  }\n\n  if (legendMode === 'follow') {\n    // create floating legend div\n    var area = e.dygraph.plotter_.area;\n    var labelsDivWidth = e.dygraph.getOption('labelsDivWidth');\n    var yAxisLabelWidth = e.dygraph.getOptionForAxis('axisLabelWidth', 'y');\n    // determine floating [left, top] coordinates of the legend div\n    // within the plotter_ area\n    // offset 20 px to the right and down from the first selection point\n    // 20 px is guess based on mouse cursor size\n    var leftLegend = points[0].x * area.w + 20;\n    var topLegend  = points[0].y * area.h - 20;\n\n    // if legend floats to end of the window area, it flips to the other\n    // side of the selection point\n    if ((leftLegend + labelsDivWidth + 1) > (window.scrollX + window.innerWidth)) {\n      leftLegend = leftLegend - 2 * 20 - labelsDivWidth - (yAxisLabelWidth - area.x);\n    }\n\n    e.dygraph.graphDiv.appendChild(this.legend_div_);\n    this.legend_div_.style.left = yAxisLabelWidth + leftLegend + \"px\";\n    this.legend_div_.style.top = topLegend + \"px\";\n  }\n\n  var html = legend.generateLegendHTML(e.dygraph, xValue, points, this.one_em_width_, row);\n  this.legend_div_.innerHTML = html;\n  this.legend_div_.style.display = '';\n};\n\nlegend.prototype.deselect = function(e) {\n  var legendMode = e.dygraph.getOption('legend');\n  if (legendMode !== 'always') {\n    this.legend_div_.style.display = \"none\";\n  }\n\n  // Have to do this every time, since styles might have changed.\n  var oneEmWidth = calculateEmWidthInDiv(this.legend_div_);\n  this.one_em_width_ = oneEmWidth;\n\n  var html = legend.generateLegendHTML(e.dygraph, undefined, undefined, oneEmWidth, null);\n  this.legend_div_.innerHTML = html;\n};\n\nlegend.prototype.didDrawChart = function(e) {\n  this.deselect(e);\n};\n\n// Right edge should be flush with the right edge of the charting area (which\n// may not be the same as the right edge of the div, if we have two y-axes.\n// TODO(danvk): is any of this really necessary? Could just set \"right\" in \"activate\".\n/**\n * Position the labels div so that:\n * - its right edge is flush with the right edge of the charting area\n * - its top edge is flush with the top edge of the charting area\n * @private\n */\nlegend.prototype.predraw = function(e) {\n  // Don't touch a user-specified labelsDiv.\n  if (!this.is_generated_div_) return;\n\n  // TODO(danvk): only use real APIs for this.\n  e.dygraph.graphDiv.appendChild(this.legend_div_);\n  var area = e.dygraph.plotter_.area;\n  var labelsDivWidth = e.dygraph.getOption(\"labelsDivWidth\");\n  this.legend_div_.style.left = area.x + area.w - labelsDivWidth - 1 + \"px\";\n  this.legend_div_.style.top = area.y + \"px\";\n  this.legend_div_.style.width = labelsDivWidth + \"px\";\n};\n\n/**\n * Called when dygraph.destroy() is called.\n * You should null out any references and detach any DOM elements.\n */\nlegend.prototype.destroy = function() {\n  this.legend_div_ = null;\n};\n\n/**\n * @private\n * Generates HTML for the legend which is displayed when hovering over the\n * chart. If no selected points are specified, a default legend is returned\n * (this may just be the empty string).\n * @param {number} x The x-value of the selected points.\n * @param {Object} sel_points List of selected points for the given\n *   x-value. Should have properties like 'name', 'yval' and 'canvasy'.\n * @param {number} oneEmWidth The pixel width for 1em in the legend. Only\n *   relevant when displaying a legend with no selection (i.e. {legend:\n *   'always'}) and with dashed lines.\n * @param {number} row The selected row index.\n */\nlegend.generateLegendHTML = function(g, x, sel_points, oneEmWidth, row) {\n  // TODO(danvk): deprecate this option in place of {legend: 'never'}\n  if (g.getOption('showLabelsOnHighlight') !== true) return '';\n\n  // If no points are selected, we display a default legend. Traditionally,\n  // this has been blank. But a better default would be a conventional legend,\n  // which provides essential information for a non-interactive chart.\n  var html, sepLines, i, dash, strokePattern;\n  var labels = g.getLabels();\n\n  if (typeof(x) === 'undefined') {\n    if (g.getOption('legend') != 'always') {\n      return '';\n    }\n\n    sepLines = g.getOption('labelsSeparateLines');\n    html = '';\n    for (i = 1; i < labels.length; i++) {\n      var series = g.getPropertiesForSeries(labels[i]);\n      if (!series.visible) continue;\n\n      if (html !== '') html += (sepLines ? '<br/>' : ' ');\n      strokePattern = g.getOption(\"strokePattern\", labels[i]);\n      dash = generateLegendDashHTML(strokePattern, series.color, oneEmWidth);\n      html += \"<span style='font-weight: bold; color: \" + series.color + \";'>\" +\n          dash + \" \" + escapeHTML(labels[i]) + \"</span>\";\n    }\n    return html;\n  }\n\n  // TODO(danvk): remove this use of a private API\n  var xOptView = g.optionsViewForAxis_('x');\n  var xvf = xOptView('valueFormatter');\n  html = xvf.call(g, x, xOptView, labels[0], g, row, 0);\n  if (html !== '') {\n    html += ':';\n  }\n\n  var yOptViews = [];\n  var num_axes = g.numAxes();\n  for (i = 0; i < num_axes; i++) {\n    // TODO(danvk): remove this use of a private API\n    yOptViews[i] = g.optionsViewForAxis_('y' + (i ? 1 + i : ''));\n  }\n  var showZeros = g.getOption(\"labelsShowZeroValues\");\n  sepLines = g.getOption(\"labelsSeparateLines\");\n  var highlightSeries = g.getHighlightSeries();\n  for (i = 0; i < sel_points.length; i++) {\n    var pt = sel_points[i];\n    if (pt.yval === 0 && !showZeros) continue;\n    if (!Dygraph.isOK(pt.canvasy)) continue;\n    if (sepLines) html += \"<br/>\";\n\n    var series = g.getPropertiesForSeries(pt.name);\n    var yOptView = yOptViews[series.axis - 1];\n    var fmtFunc = yOptView('valueFormatter');\n    var yval = fmtFunc.call(g, pt.yval, yOptView, pt.name, g, row, labels.indexOf(pt.name));\n\n    var cls = (pt.name == highlightSeries) ? \" class='highlight'\" : \"\";\n\n    // TODO(danvk): use a template string here and make it an attribute.\n    html += \"<span\" + cls + \">\" + \" <b><span style='color: \" + series.color + \";'>\" +\n        escapeHTML(pt.name) + \"</span></b>:&#160;\" + yval + \"</span>\";\n  }\n  return html;\n};\n\n\n/**\n * Generates html for the \"dash\" displayed on the legend when using \"legend: always\".\n * In particular, this works for dashed lines with any stroke pattern. It will\n * try to scale the pattern to fit in 1em width. Or if small enough repeat the\n * pattern for 1em width.\n *\n * @param strokePattern The pattern\n * @param color The color of the series.\n * @param oneEmWidth The width in pixels of 1em in the legend.\n * @private\n */\ngenerateLegendDashHTML = function(strokePattern, color, oneEmWidth) {\n  // Easy, common case: a solid line\n  if (!strokePattern || strokePattern.length <= 1) {\n    return \"<div style=\\\"display: inline-block; position: relative; \" +\n    \"bottom: .5ex; padding-left: 1em; height: 1px; \" +\n    \"border-bottom: 2px solid \" + color + \";\\\"></div>\";\n  }\n\n  var i, j, paddingLeft, marginRight;\n  var strokePixelLength = 0, segmentLoop = 0;\n  var normalizedPattern = [];\n  var loop;\n\n  // Compute the length of the pixels including the first segment twice, \n  // since we repeat it.\n  for (i = 0; i <= strokePattern.length; i++) {\n    strokePixelLength += strokePattern[i%strokePattern.length];\n  }\n\n  // See if we can loop the pattern by itself at least twice.\n  loop = Math.floor(oneEmWidth/(strokePixelLength-strokePattern[0]));\n  if (loop > 1) {\n    // This pattern fits at least two times, no scaling just convert to em;\n    for (i = 0; i < strokePattern.length; i++) {\n      normalizedPattern[i] = strokePattern[i]/oneEmWidth;\n    }\n    // Since we are repeating the pattern, we don't worry about repeating the\n    // first segment in one draw.\n    segmentLoop = normalizedPattern.length;\n  } else {\n    // If the pattern doesn't fit in the legend we scale it to fit.\n    loop = 1;\n    for (i = 0; i < strokePattern.length; i++) {\n      normalizedPattern[i] = strokePattern[i]/strokePixelLength;\n    }\n    // For the scaled patterns we do redraw the first segment.\n    segmentLoop = normalizedPattern.length+1;\n  }\n\n  // Now make the pattern.\n  var dash = \"\";\n  for (j = 0; j < loop; j++) {\n    for (i = 0; i < segmentLoop; i+=2) {\n      // The padding is the drawn segment.\n      paddingLeft = normalizedPattern[i%normalizedPattern.length];\n      if (i < strokePattern.length) {\n        // The margin is the space segment.\n        marginRight = normalizedPattern[(i+1)%normalizedPattern.length];\n      } else {\n        // The repeated first segment has no right margin.\n        marginRight = 0;\n      }\n      dash += \"<div style=\\\"display: inline-block; position: relative; \" +\n        \"bottom: .5ex; margin-right: \" + marginRight + \"em; padding-left: \" +\n        paddingLeft + \"em; height: 1px; border-bottom: 2px solid \" + color +\n        \";\\\"></div>\";\n    }\n  }\n  return dash;\n};\n\n\nreturn legend;\n})();\n","/**\n * @license\n * Copyright 2011 Paul Felix (paul.eric.felix@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n/*global Dygraph:false,TouchEvent:false */\n\n/**\n * @fileoverview This file contains the RangeSelector plugin used to provide\n * a timeline range selector widget for dygraphs.\n */\n\nDygraph.Plugins.RangeSelector = (function() {\n\n/*global Dygraph:false */\n\"use strict\";\n\nvar rangeSelector = function() {\n  this.isIE_ = /MSIE/.test(navigator.userAgent) && !window.opera;\n  this.hasTouchInterface_ = typeof(TouchEvent) != 'undefined';\n  this.isMobileDevice_ = /mobile|android/gi.test(navigator.appVersion);\n  this.interfaceCreated_ = false;\n};\n\nrangeSelector.prototype.toString = function() {\n  return \"RangeSelector Plugin\";\n};\n\nrangeSelector.prototype.activate = function(dygraph) {\n  this.dygraph_ = dygraph;\n  if (this.getOption_('showRangeSelector')) {\n    this.createInterface_();\n  }\n  return {\n    layout: this.reserveSpace_,\n    predraw: this.renderStaticLayer_,\n    didDrawChart: this.renderInteractiveLayer_\n  };\n};\n\nrangeSelector.prototype.destroy = function() {\n  this.bgcanvas_ = null;\n  this.fgcanvas_ = null;\n  this.leftZoomHandle_ = null;\n  this.rightZoomHandle_ = null;\n};\n\n//------------------------------------------------------------------\n// Private methods\n//------------------------------------------------------------------\n\nrangeSelector.prototype.getOption_ = function(name, opt_series) {\n  return this.dygraph_.getOption(name, opt_series);\n};\n\nrangeSelector.prototype.setDefaultOption_ = function(name, value) {\n  this.dygraph_.attrs_[name] = value;\n};\n\n/**\n * @private\n * Creates the range selector elements and adds them to the graph.\n */\nrangeSelector.prototype.createInterface_ = function() {\n  this.createCanvases_();\n  this.createZoomHandles_();\n  this.initInteraction_();\n\n  // Range selector and animatedZooms have a bad interaction. See issue 359.\n  if (this.getOption_('animatedZooms')) {\n    console.warn('Animated zooms and range selector are not compatible; disabling animatedZooms.');\n    this.dygraph_.updateOptions({animatedZooms: false}, true);\n  }\n\n  this.interfaceCreated_ = true;\n  this.addToGraph_();\n};\n\n/**\n * @private\n * Adds the range selector to the graph.\n */\nrangeSelector.prototype.addToGraph_ = function() {\n  var graphDiv = this.graphDiv_ = this.dygraph_.graphDiv;\n  graphDiv.appendChild(this.bgcanvas_);\n  graphDiv.appendChild(this.fgcanvas_);\n  graphDiv.appendChild(this.leftZoomHandle_);\n  graphDiv.appendChild(this.rightZoomHandle_);\n};\n\n/**\n * @private\n * Removes the range selector from the graph.\n */\nrangeSelector.prototype.removeFromGraph_ = function() {\n  var graphDiv = this.graphDiv_;\n  graphDiv.removeChild(this.bgcanvas_);\n  graphDiv.removeChild(this.fgcanvas_);\n  graphDiv.removeChild(this.leftZoomHandle_);\n  graphDiv.removeChild(this.rightZoomHandle_);\n  this.graphDiv_ = null;\n};\n\n/**\n * @private\n * Called by Layout to allow range selector to reserve its space.\n */\nrangeSelector.prototype.reserveSpace_ = function(e) {\n  if (this.getOption_('showRangeSelector')) {\n    e.reserveSpaceBottom(this.getOption_('rangeSelectorHeight') + 4);\n  }\n};\n\n/**\n * @private\n * Renders the static portion of the range selector at the predraw stage.\n */\nrangeSelector.prototype.renderStaticLayer_ = function() {\n  if (!this.updateVisibility_()) {\n    return;\n  }\n  this.resize_();\n  this.drawStaticLayer_();\n};\n\n/**\n * @private\n * Renders the interactive portion of the range selector after the chart has been drawn.\n */\nrangeSelector.prototype.renderInteractiveLayer_ = function() {\n  if (!this.updateVisibility_() || this.isChangingRange_) {\n    return;\n  }\n  this.placeZoomHandles_();\n  this.drawInteractiveLayer_();\n};\n\n/**\n * @private\n * Check to see if the range selector is enabled/disabled and update visibility accordingly.\n */\nrangeSelector.prototype.updateVisibility_ = function() {\n  var enabled = this.getOption_('showRangeSelector');\n  if (enabled) {\n    if (!this.interfaceCreated_) {\n      this.createInterface_();\n    } else if (!this.graphDiv_ || !this.graphDiv_.parentNode) {\n      this.addToGraph_();\n    }\n  } else if (this.graphDiv_) {\n    this.removeFromGraph_();\n    var dygraph = this.dygraph_;\n    setTimeout(function() { dygraph.width_ = 0; dygraph.resize(); }, 1);\n  }\n  return enabled;\n};\n\n/**\n * @private\n * Resizes the range selector.\n */\nrangeSelector.prototype.resize_ = function() {\n  function setElementRect(canvas, context, rect) {\n    var canvasScale = Dygraph.getContextPixelRatio(context);\n\n    canvas.style.top = rect.y + 'px';\n    canvas.style.left = rect.x + 'px';\n    canvas.width = rect.w * canvasScale;\n    canvas.height = rect.h * canvasScale;\n    canvas.style.width = rect.w + 'px';\n    canvas.style.height = rect.h + 'px';\n\n    if(canvasScale != 1) {\n      context.scale(canvasScale, canvasScale);\n    }\n  }\n\n  var plotArea = this.dygraph_.layout_.getPlotArea();\n  \n  var xAxisLabelHeight = 0;\n  if (this.dygraph_.getOptionForAxis('drawAxis', 'x')) {\n    xAxisLabelHeight = this.getOption_('xAxisHeight') || (this.getOption_('axisLabelFontSize') + 2 * this.getOption_('axisTickSize'));\n  }\n  this.canvasRect_ = {\n    x: plotArea.x,\n    y: plotArea.y + plotArea.h + xAxisLabelHeight + 4,\n    w: plotArea.w,\n    h: this.getOption_('rangeSelectorHeight')\n  };\n\n  setElementRect(this.bgcanvas_, this.bgcanvas_ctx_, this.canvasRect_);\n  setElementRect(this.fgcanvas_, this.fgcanvas_ctx_, this.canvasRect_);\n};\n\n/**\n * @private\n * Creates the background and foreground canvases.\n */\nrangeSelector.prototype.createCanvases_ = function() {\n  this.bgcanvas_ = Dygraph.createCanvas();\n  this.bgcanvas_.className = 'dygraph-rangesel-bgcanvas';\n  this.bgcanvas_.style.position = 'absolute';\n  this.bgcanvas_.style.zIndex = 9;\n  this.bgcanvas_ctx_ = Dygraph.getContext(this.bgcanvas_);\n\n  this.fgcanvas_ = Dygraph.createCanvas();\n  this.fgcanvas_.className = 'dygraph-rangesel-fgcanvas';\n  this.fgcanvas_.style.position = 'absolute';\n  this.fgcanvas_.style.zIndex = 9;\n  this.fgcanvas_.style.cursor = 'default';\n  this.fgcanvas_ctx_ = Dygraph.getContext(this.fgcanvas_);\n};\n\n/**\n * @private\n * Creates the zoom handle elements.\n */\nrangeSelector.prototype.createZoomHandles_ = function() {\n  var img = new Image();\n  img.className = 'dygraph-rangesel-zoomhandle';\n  img.style.position = 'absolute';\n  img.style.zIndex = 10;\n  img.style.visibility = 'hidden'; // Initially hidden so they don't show up in the wrong place.\n  img.style.cursor = 'col-resize';\n\n  if (/MSIE 7/.test(navigator.userAgent)) { // IE7 doesn't support embedded src data.\n    img.width = 7;\n    img.height = 14;\n    img.style.backgroundColor = 'white';\n    img.style.border = '1px solid #333333'; // Just show box in IE7.\n  } else {\n    img.width = 9;\n    img.height = 16;\n    img.src = 'data:image/png;base64,' +\n'iVBORw0KGgoAAAANSUhEUgAAAAkAAAAQCAYAAADESFVDAAAAAXNSR0IArs4c6QAAAAZiS0dEANAA' +\n'zwDP4Z7KegAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAAd0SU1FB9sHGw0cMqdt1UwAAAAZdEVYdENv' +\n'bW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAAaElEQVQoz+3SsRFAQBCF4Z9WJM8KCDVwownl' +\n'6YXsTmCUsyKGkZzcl7zkz3YLkypgAnreFmDEpHkIwVOMfpdi9CEEN2nGpFdwD03yEqDtOgCaun7s' +\n'qSTDH32I1pQA2Pb9sZecAxc5r3IAb21d6878xsAAAAAASUVORK5CYII=';\n  }\n\n  if (this.isMobileDevice_) {\n    img.width *= 2;\n    img.height *= 2;\n  }\n\n  this.leftZoomHandle_ = img;\n  this.rightZoomHandle_ = img.cloneNode(false);\n};\n\n/**\n * @private\n * Sets up the interaction for the range selector.\n */\nrangeSelector.prototype.initInteraction_ = function() {\n  var self = this;\n  var topElem = document;\n  var clientXLast = 0;\n  var handle = null;\n  var isZooming = false;\n  var isPanning = false;\n  var dynamic = !this.isMobileDevice_;\n\n  // We cover iframes during mouse interactions. See comments in\n  // dygraph-utils.js for more info on why this is a good idea.\n  var tarp = new Dygraph.IFrameTarp();\n\n  // functions, defined below.  Defining them this way (rather than with\n  // \"function foo() {...}\" makes JSHint happy.\n  var toXDataWindow, onZoomStart, onZoom, onZoomEnd, doZoom, isMouseInPanZone,\n      onPanStart, onPan, onPanEnd, doPan, onCanvasHover;\n\n  // Touch event functions\n  var onZoomHandleTouchEvent, onCanvasTouchEvent, addTouchEvents;\n\n  toXDataWindow = function(zoomHandleStatus) {\n    var xDataLimits = self.dygraph_.xAxisExtremes();\n    var fact = (xDataLimits[1] - xDataLimits[0])/self.canvasRect_.w;\n    var xDataMin = xDataLimits[0] + (zoomHandleStatus.leftHandlePos - self.canvasRect_.x)*fact;\n    var xDataMax = xDataLimits[0] + (zoomHandleStatus.rightHandlePos - self.canvasRect_.x)*fact;\n    return [xDataMin, xDataMax];\n  };\n\n  onZoomStart = function(e) {\n    Dygraph.cancelEvent(e);\n    isZooming = true;\n    clientXLast = e.clientX;\n    handle = e.target ? e.target : e.srcElement;\n    if (e.type === 'mousedown' || e.type === 'dragstart') {\n      // These events are removed manually.\n      Dygraph.addEvent(topElem, 'mousemove', onZoom);\n      Dygraph.addEvent(topElem, 'mouseup', onZoomEnd);\n    }\n    self.fgcanvas_.style.cursor = 'col-resize';\n    tarp.cover();\n    return true;\n  };\n\n  onZoom = function(e) {\n    if (!isZooming) {\n      return false;\n    }\n    Dygraph.cancelEvent(e);\n\n    var delX = e.clientX - clientXLast;\n    if (Math.abs(delX) < 4) {\n      return true;\n    }\n    clientXLast = e.clientX;\n\n    // Move handle.\n    var zoomHandleStatus = self.getZoomHandleStatus_();\n    var newPos;\n    if (handle == self.leftZoomHandle_) {\n      newPos = zoomHandleStatus.leftHandlePos + delX;\n      newPos = Math.min(newPos, zoomHandleStatus.rightHandlePos - handle.width - 3);\n      newPos = Math.max(newPos, self.canvasRect_.x);\n    } else {\n      newPos = zoomHandleStatus.rightHandlePos + delX;\n      newPos = Math.min(newPos, self.canvasRect_.x + self.canvasRect_.w);\n      newPos = Math.max(newPos, zoomHandleStatus.leftHandlePos + handle.width + 3);\n    }\n    var halfHandleWidth = handle.width/2;\n    handle.style.left = (newPos - halfHandleWidth) + 'px';\n    self.drawInteractiveLayer_();\n\n    // Zoom on the fly.\n    if (dynamic) {\n      doZoom();\n    }\n    return true;\n  };\n\n  onZoomEnd = function(e) {\n    if (!isZooming) {\n      return false;\n    }\n    isZooming = false;\n    tarp.uncover();\n    Dygraph.removeEvent(topElem, 'mousemove', onZoom);\n    Dygraph.removeEvent(topElem, 'mouseup', onZoomEnd);\n    self.fgcanvas_.style.cursor = 'default';\n\n    // If on a slower device, zoom now.\n    if (!dynamic) {\n      doZoom();\n    }\n    return true;\n  };\n\n  doZoom = function() {\n    try {\n      var zoomHandleStatus = self.getZoomHandleStatus_();\n      self.isChangingRange_ = true;\n      if (!zoomHandleStatus.isZoomed) {\n        self.dygraph_.resetZoom();\n      } else {\n        var xDataWindow = toXDataWindow(zoomHandleStatus);\n        self.dygraph_.doZoomXDates_(xDataWindow[0], xDataWindow[1]);\n      }\n    } finally {\n      self.isChangingRange_ = false;\n    }\n  };\n\n  isMouseInPanZone = function(e) {\n    var rect = self.leftZoomHandle_.getBoundingClientRect();\n    var leftHandleClientX = rect.left + rect.width/2;\n    rect = self.rightZoomHandle_.getBoundingClientRect();\n    var rightHandleClientX = rect.left + rect.width/2;\n    return (e.clientX > leftHandleClientX && e.clientX < rightHandleClientX);\n  };\n\n  onPanStart = function(e) {\n    if (!isPanning && isMouseInPanZone(e) && self.getZoomHandleStatus_().isZoomed) {\n      Dygraph.cancelEvent(e);\n      isPanning = true;\n      clientXLast = e.clientX;\n      if (e.type === 'mousedown') {\n        // These events are removed manually.\n        Dygraph.addEvent(topElem, 'mousemove', onPan);\n        Dygraph.addEvent(topElem, 'mouseup', onPanEnd);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  onPan = function(e) {\n    if (!isPanning) {\n      return false;\n    }\n    Dygraph.cancelEvent(e);\n\n    var delX = e.clientX - clientXLast;\n    if (Math.abs(delX) < 4) {\n      return true;\n    }\n    clientXLast = e.clientX;\n\n    // Move range view\n    var zoomHandleStatus = self.getZoomHandleStatus_();\n    var leftHandlePos = zoomHandleStatus.leftHandlePos;\n    var rightHandlePos = zoomHandleStatus.rightHandlePos;\n    var rangeSize = rightHandlePos - leftHandlePos;\n    if (leftHandlePos + delX <= self.canvasRect_.x) {\n      leftHandlePos = self.canvasRect_.x;\n      rightHandlePos = leftHandlePos + rangeSize;\n    } else if (rightHandlePos + delX >= self.canvasRect_.x + self.canvasRect_.w) {\n      rightHandlePos = self.canvasRect_.x + self.canvasRect_.w;\n      leftHandlePos = rightHandlePos - rangeSize;\n    } else {\n      leftHandlePos += delX;\n      rightHandlePos += delX;\n    }\n    var halfHandleWidth = self.leftZoomHandle_.width/2;\n    self.leftZoomHandle_.style.left = (leftHandlePos - halfHandleWidth) + 'px';\n    self.rightZoomHandle_.style.left = (rightHandlePos - halfHandleWidth) + 'px';\n    self.drawInteractiveLayer_();\n\n    // Do pan on the fly.\n    if (dynamic) {\n      doPan();\n    }\n    return true;\n  };\n\n  onPanEnd = function(e) {\n    if (!isPanning) {\n      return false;\n    }\n    isPanning = false;\n    Dygraph.removeEvent(topElem, 'mousemove', onPan);\n    Dygraph.removeEvent(topElem, 'mouseup', onPanEnd);\n    // If on a slower device, do pan now.\n    if (!dynamic) {\n      doPan();\n    }\n    return true;\n  };\n\n  doPan = function() {\n    try {\n      self.isChangingRange_ = true;\n      self.dygraph_.dateWindow_ = toXDataWindow(self.getZoomHandleStatus_());\n      self.dygraph_.drawGraph_(false);\n    } finally {\n      self.isChangingRange_ = false;\n    }\n  };\n\n  onCanvasHover = function(e) {\n    if (isZooming || isPanning) {\n      return;\n    }\n    var cursor = isMouseInPanZone(e) ? 'move' : 'default';\n    if (cursor != self.fgcanvas_.style.cursor) {\n      self.fgcanvas_.style.cursor = cursor;\n    }\n  };\n\n  onZoomHandleTouchEvent = function(e) {\n    if (e.type == 'touchstart' && e.targetTouches.length == 1) {\n      if (onZoomStart(e.targetTouches[0])) {\n        Dygraph.cancelEvent(e);\n      }\n    } else if (e.type == 'touchmove' && e.targetTouches.length == 1) {\n      if (onZoom(e.targetTouches[0])) {\n        Dygraph.cancelEvent(e);\n      }\n    } else {\n      onZoomEnd(e);\n    }\n  };\n\n  onCanvasTouchEvent = function(e) {\n    if (e.type == 'touchstart' && e.targetTouches.length == 1) {\n      if (onPanStart(e.targetTouches[0])) {\n        Dygraph.cancelEvent(e);\n      }\n    } else if (e.type == 'touchmove' && e.targetTouches.length == 1) {\n      if (onPan(e.targetTouches[0])) {\n        Dygraph.cancelEvent(e);\n      }\n    } else {\n      onPanEnd(e);\n    }\n  };\n\n  addTouchEvents = function(elem, fn) {\n    var types = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n    for (var i = 0; i < types.length; i++) {\n      self.dygraph_.addAndTrackEvent(elem, types[i], fn);\n    }\n  };\n\n  this.setDefaultOption_('interactionModel', Dygraph.Interaction.dragIsPanInteractionModel);\n  this.setDefaultOption_('panEdgeFraction', 0.0001);\n\n  var dragStartEvent = window.opera ? 'mousedown' : 'dragstart';\n  this.dygraph_.addAndTrackEvent(this.leftZoomHandle_, dragStartEvent, onZoomStart);\n  this.dygraph_.addAndTrackEvent(this.rightZoomHandle_, dragStartEvent, onZoomStart);\n\n  this.dygraph_.addAndTrackEvent(this.fgcanvas_, 'mousedown', onPanStart);\n  this.dygraph_.addAndTrackEvent(this.fgcanvas_, 'mousemove', onCanvasHover);\n\n  // Touch events\n  if (this.hasTouchInterface_) {\n    addTouchEvents(this.leftZoomHandle_, onZoomHandleTouchEvent);\n    addTouchEvents(this.rightZoomHandle_, onZoomHandleTouchEvent);\n    addTouchEvents(this.fgcanvas_, onCanvasTouchEvent);\n  }\n};\n\n/**\n * @private\n * Draws the static layer in the background canvas.\n */\nrangeSelector.prototype.drawStaticLayer_ = function() {\n  var ctx = this.bgcanvas_ctx_;\n  ctx.clearRect(0, 0, this.canvasRect_.w, this.canvasRect_.h);\n  try {\n    this.drawMiniPlot_();\n  } catch(ex) {\n    console.warn(ex);\n  }\n\n  var margin = 0.5;\n  this.bgcanvas_ctx_.lineWidth = 1;\n  ctx.strokeStyle = 'gray';\n  ctx.beginPath();\n  ctx.moveTo(margin, margin);\n  ctx.lineTo(margin, this.canvasRect_.h-margin);\n  ctx.lineTo(this.canvasRect_.w-margin, this.canvasRect_.h-margin);\n  ctx.lineTo(this.canvasRect_.w-margin, margin);\n  ctx.stroke();\n};\n\n\n/**\n * @private\n * Draws the mini plot in the background canvas.\n */\nrangeSelector.prototype.drawMiniPlot_ = function() {\n  var fillStyle = this.getOption_('rangeSelectorPlotFillColor');\n  var strokeStyle = this.getOption_('rangeSelectorPlotStrokeColor');\n  if (!fillStyle && !strokeStyle) {\n    return;\n  }\n\n  var stepPlot = this.getOption_('stepPlot');\n\n  var combinedSeriesData = this.computeCombinedSeriesAndLimits_();\n  var yRange = combinedSeriesData.yMax - combinedSeriesData.yMin;\n\n  // Draw the mini plot.\n  var ctx = this.bgcanvas_ctx_;\n  var margin = 0.5;\n\n  var xExtremes = this.dygraph_.xAxisExtremes();\n  var xRange = Math.max(xExtremes[1] - xExtremes[0], 1.e-30);\n  var xFact = (this.canvasRect_.w - margin)/xRange;\n  var yFact = (this.canvasRect_.h - margin)/yRange;\n  var canvasWidth = this.canvasRect_.w - margin;\n  var canvasHeight = this.canvasRect_.h - margin;\n\n  var prevX = null, prevY = null;\n\n  ctx.beginPath();\n  ctx.moveTo(margin, canvasHeight);\n  for (var i = 0; i < combinedSeriesData.data.length; i++) {\n    var dataPoint = combinedSeriesData.data[i];\n    var x = ((dataPoint[0] !== null) ? ((dataPoint[0] - xExtremes[0])*xFact) : NaN);\n    var y = ((dataPoint[1] !== null) ? (canvasHeight - (dataPoint[1] - combinedSeriesData.yMin)*yFact) : NaN);\n\n    // Skip points that don't change the x-value. Overly fine-grained points\n    // can cause major slowdowns with the ctx.fill() call below.\n    if (!stepPlot && prevX !== null && Math.round(x) == Math.round(prevX)) {\n      continue;\n    }\n\n    if (isFinite(x) && isFinite(y)) {\n      if(prevX === null) {\n        ctx.lineTo(x, canvasHeight);\n      }\n      else if (stepPlot) {\n        ctx.lineTo(x, prevY);\n      }\n      ctx.lineTo(x, y);\n      prevX = x;\n      prevY = y;\n    }\n    else {\n      if(prevX !== null) {\n        if (stepPlot) {\n          ctx.lineTo(x, prevY);\n          ctx.lineTo(x, canvasHeight);\n        }\n        else {\n          ctx.lineTo(prevX, canvasHeight);\n        }\n      }\n      prevX = prevY = null;\n    }\n  }\n  ctx.lineTo(canvasWidth, canvasHeight);\n  ctx.closePath();\n\n  if (fillStyle) {\n    var lingrad = this.bgcanvas_ctx_.createLinearGradient(0, 0, 0, canvasHeight);\n    lingrad.addColorStop(0, 'white');\n    lingrad.addColorStop(1, fillStyle);\n    this.bgcanvas_ctx_.fillStyle = lingrad;\n    ctx.fill();\n  }\n\n  if (strokeStyle) {\n    this.bgcanvas_ctx_.strokeStyle = strokeStyle;\n    this.bgcanvas_ctx_.lineWidth = 1.5;\n    ctx.stroke();\n  }\n};\n\n/**\n * @private\n * Computes and returns the combined series data along with min/max for the mini plot.\n * The combined series consists of averaged values for all series.\n * When series have error bars, the error bars are ignored.\n * @return {Object} An object containing combined series array, ymin, ymax.\n */\nrangeSelector.prototype.computeCombinedSeriesAndLimits_ = function() {\n  var g = this.dygraph_;\n  var logscale = this.getOption_('logscale');\n  var i;\n\n  // Select series to combine. By default, all series are combined.\n  var numColumns = g.numColumns();\n  var labels = g.getLabels();\n  var includeSeries = new Array(numColumns);\n  var anySet = false;\n  for (i = 1; i < numColumns; i++) {\n    var include = this.getOption_('showInRangeSelector', labels[i]);\n    includeSeries[i] = include;\n    if (include !== null) anySet = true;  // it's set explicitly for this series\n  }\n  if (!anySet) {\n    for (i = 0; i < includeSeries.length; i++) includeSeries[i] = true;\n  }\n\n  // Create a combined series (average of selected series values).\n  // TODO(danvk): short-circuit if there's only one series.\n  var rolledSeries = [];\n  var dataHandler = g.dataHandler_;\n  var options = g.attributes_;\n  for (i = 1; i < g.numColumns(); i++) {\n    if (!includeSeries[i]) continue;\n    var series = dataHandler.extractSeries(g.rawData_, i, options);\n    if (g.rollPeriod() > 1) {\n      series = dataHandler.rollingAverage(series, g.rollPeriod(), options);\n    }\n    \n    rolledSeries.push(series);\n  }\n\n  var combinedSeries = [];\n  for (i = 0; i < rolledSeries[0].length; i++) {\n    var sum = 0;\n    var count = 0;\n    for (var j = 0; j < rolledSeries.length; j++) {\n      var y = rolledSeries[j][i][1];\n      if (y === null || isNaN(y)) continue;\n      count++;\n      sum += y;\n    }\n    combinedSeries.push([rolledSeries[0][i][0], sum / count]);\n  }\n\n  // Compute the y range.\n  var yMin = Number.MAX_VALUE;\n  var yMax = -Number.MAX_VALUE;\n  for (i = 0; i < combinedSeries.length; i++) {\n    var yVal = combinedSeries[i][1];\n    if (yVal !== null && isFinite(yVal) && (!logscale || yVal > 0)) {\n      yMin = Math.min(yMin, yVal);\n      yMax = Math.max(yMax, yVal);\n    }\n  }\n\n  // Convert Y data to log scale if needed.\n  // Also, expand the Y range to compress the mini plot a little.\n  var extraPercent = 0.25;\n  if (logscale) {\n    yMax = Dygraph.log10(yMax);\n    yMax += yMax*extraPercent;\n    yMin = Dygraph.log10(yMin);\n    for (i = 0; i < combinedSeries.length; i++) {\n      combinedSeries[i][1] = Dygraph.log10(combinedSeries[i][1]);\n    }\n  } else {\n    var yExtra;\n    var yRange = yMax - yMin;\n    if (yRange <= Number.MIN_VALUE) {\n      yExtra = yMax*extraPercent;\n    } else {\n      yExtra = yRange*extraPercent;\n    }\n    yMax += yExtra;\n    yMin -= yExtra;\n  }\n\n  return {data: combinedSeries, yMin: yMin, yMax: yMax};\n};\n\n/**\n * @private\n * Places the zoom handles in the proper position based on the current X data window.\n */\nrangeSelector.prototype.placeZoomHandles_ = function() {\n  var xExtremes = this.dygraph_.xAxisExtremes();\n  var xWindowLimits = this.dygraph_.xAxisRange();\n  var xRange = xExtremes[1] - xExtremes[0];\n  var leftPercent = Math.max(0, (xWindowLimits[0] - xExtremes[0])/xRange);\n  var rightPercent = Math.max(0, (xExtremes[1] - xWindowLimits[1])/xRange);\n  var leftCoord = this.canvasRect_.x + this.canvasRect_.w*leftPercent;\n  var rightCoord = this.canvasRect_.x + this.canvasRect_.w*(1 - rightPercent);\n  var handleTop = Math.max(this.canvasRect_.y, this.canvasRect_.y + (this.canvasRect_.h - this.leftZoomHandle_.height)/2);\n  var halfHandleWidth = this.leftZoomHandle_.width/2;\n  this.leftZoomHandle_.style.left = (leftCoord - halfHandleWidth) + 'px';\n  this.leftZoomHandle_.style.top = handleTop + 'px';\n  this.rightZoomHandle_.style.left = (rightCoord - halfHandleWidth) + 'px';\n  this.rightZoomHandle_.style.top = this.leftZoomHandle_.style.top;\n\n  this.leftZoomHandle_.style.visibility = 'visible';\n  this.rightZoomHandle_.style.visibility = 'visible';\n};\n\n/**\n * @private\n * Draws the interactive layer in the foreground canvas.\n */\nrangeSelector.prototype.drawInteractiveLayer_ = function() {\n  var ctx = this.fgcanvas_ctx_;\n  ctx.clearRect(0, 0, this.canvasRect_.w, this.canvasRect_.h);\n  var margin = 1;\n  var width = this.canvasRect_.w - margin;\n  var height = this.canvasRect_.h - margin;\n  var zoomHandleStatus = this.getZoomHandleStatus_();\n\n  ctx.strokeStyle = 'black';\n  if (!zoomHandleStatus.isZoomed) {\n    ctx.beginPath();\n    ctx.moveTo(margin, margin);\n    ctx.lineTo(margin, height);\n    ctx.lineTo(width, height);\n    ctx.lineTo(width, margin);\n    ctx.stroke();\n  } else {\n    var leftHandleCanvasPos = Math.max(margin, zoomHandleStatus.leftHandlePos - this.canvasRect_.x);\n    var rightHandleCanvasPos = Math.min(width, zoomHandleStatus.rightHandlePos - this.canvasRect_.x);\n\n    ctx.fillStyle = 'rgba(240, 240, 240, 0.6)';\n    ctx.fillRect(0, 0, leftHandleCanvasPos, this.canvasRect_.h);\n    ctx.fillRect(rightHandleCanvasPos, 0, this.canvasRect_.w - rightHandleCanvasPos, this.canvasRect_.h);\n\n    ctx.beginPath();\n    ctx.moveTo(margin, margin);\n    ctx.lineTo(leftHandleCanvasPos, margin);\n    ctx.lineTo(leftHandleCanvasPos, height);\n    ctx.lineTo(rightHandleCanvasPos, height);\n    ctx.lineTo(rightHandleCanvasPos, margin);\n    ctx.lineTo(width, margin);\n    ctx.stroke();\n  }\n};\n\n/**\n * @private\n * Returns the current zoom handle position information.\n * @return {Object} The zoom handle status.\n */\nrangeSelector.prototype.getZoomHandleStatus_ = function() {\n  var halfHandleWidth = this.leftZoomHandle_.width/2;\n  var leftHandlePos = parseFloat(this.leftZoomHandle_.style.left) + halfHandleWidth;\n  var rightHandlePos = parseFloat(this.rightZoomHandle_.style.left) + halfHandleWidth;\n  return {\n      leftHandlePos: leftHandlePos,\n      rightHandlePos: rightHandlePos,\n      isZoomed: (leftHandlePos - 1 > this.canvasRect_.x || rightHandlePos + 1 < this.canvasRect_.x+this.canvasRect_.w)\n  };\n};\n\nreturn rangeSelector;\n\n})();\n","/*global Dygraph:false */\n\n// This file defines the ordering of the plugins.\n//\n// The ordering is from most-general to most-specific.\n// This means that, in an event cascade, plugins which have registered for that\n// event will be called in reverse order.\n//\n// This is most relevant for plugins which register a layout event, e.g.\n// Axes, Legend and ChartLabels.\n\nDygraph.PLUGINS.push(\n  Dygraph.Plugins.Legend,\n  Dygraph.Plugins.Axes,\n  Dygraph.Plugins.RangeSelector, // Has to be before ChartLabels so that its callbacks are called after ChartLabels' callbacks.\n  Dygraph.Plugins.ChartLabels,\n  Dygraph.Plugins.Annotations,\n  Dygraph.Plugins.Grid\n);\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview This file contains the managment of data handlers\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n * \n * The idea is to define a common, generic data format that works for all data\n * structures supported by dygraphs. To make this possible, the DataHandler\n * interface is introduced. This makes it possible, that dygraph itself can work\n * with the same logic for every data type independent of the actual format and\n * the DataHandler takes care of the data format specific jobs. \n * DataHandlers are implemented for all data types supported by Dygraphs and\n * return Dygraphs compliant formats.\n * By default the correct DataHandler is chosen based on the options set.\n * Optionally the user may use his own DataHandler (similar to the plugin\n * system).\n * \n * \n * The unified data format returend by each handler is defined as so: \n * series[n][point] = [x,y,(extras)] \n * \n * This format contains the common basis that is needed to draw a simple line\n * series extended by optional extras for more complex graphing types. It\n * contains a primitive x value as first array entry, a primitive y value as\n * second array entry and an optional extras object for additional data needed.\n * \n * x must always be a number.\n * y must always be a number, NaN of type number or null.\n * extras is optional and must be interpreted by the DataHandler. It may be of\n * any type. \n * \n * In practice this might look something like this:\n * default: [x, yVal]\n * errorBar / customBar: [x, yVal, [yTopVariance, yBottomVariance] ]\n * \n */\n/*global Dygraph:false */\n/*global DygraphLayout:false */\n\n/**\n * \n * The data handler is responsible for all data specific operations. All of the\n * series data it receives and returns is always in the unified data format.\n * Initially the unified data is created by the extractSeries method\n * @constructor\n */\nDygraph.DataHandler = function () {\n};\n\n/**\n * A collection of functions to create and retrieve data handlers.\n * @type {Object.<!Dygraph.DataHandler>}\n */\nDygraph.DataHandlers = {};\n\n(function() {\n\n\"use strict\";\n\nvar handler = Dygraph.DataHandler;\n\n/**\n * X-value array index constant for unified data samples.\n * @const\n * @type {number}\n */\nhandler.X = 0;\n\n/**\n * Y-value array index constant for unified data samples.\n * @const\n * @type {number}\n */\nhandler.Y = 1;\n\n/**\n * Extras-value array index constant for unified data samples.\n * @const\n * @type {number}\n */\nhandler.EXTRAS = 2;\n\n/**\n * Extracts one series from the raw data (a 2D array) into an array of the\n * unified data format.\n * This is where undesirable points (i.e. negative values on log scales and\n * missing values through which we wish to connect lines) are dropped.\n * TODO(danvk): the \"missing values\" bit above doesn't seem right.\n * \n * @param {!Array.<Array>} rawData The raw data passed into dygraphs where \n *     rawData[i] = [x,ySeries1,...,ySeriesN].\n * @param {!number} seriesIndex Index of the series to extract. All other\n *     series should be ignored.\n * @param {!DygraphOptions} options Dygraph options.\n * @return {Array.<[!number,?number,?]>} The series in the unified data format\n *     where series[i] = [x,y,{extras}]. \n */\nhandler.prototype.extractSeries = function(rawData, seriesIndex, options) {\n};\n\n/**\n * Converts a series to a Point array.  The resulting point array must be\n * returned in increasing order of idx property.\n * \n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *          data format where series[i] = [x,y,{extras}].\n * @param {!string} setName Name of the series.\n * @param {!number} boundaryIdStart Index offset of the first point, equal to the\n *          number of skipped points left of the date window minimum (if any).\n * @return {!Array.<Dygraph.PointType>} List of points for this series.\n */\nhandler.prototype.seriesToPoints = function(series, setName, boundaryIdStart) {\n  // TODO(bhs): these loops are a hot-spot for high-point-count charts. In\n  // fact,\n  // on chrome+linux, they are 6 times more expensive than iterating through\n  // the\n  // points and drawing the lines. The brunt of the cost comes from allocating\n  // the |point| structures.\n  var points = [];\n  for ( var i = 0; i < series.length; ++i) {\n    var item = series[i];\n    var yraw = item[1];\n    var yval = yraw === null ? null : handler.parseFloat(yraw);\n    var point = {\n      x : NaN,\n      y : NaN,\n      xval : handler.parseFloat(item[0]),\n      yval : yval,\n      name : setName, // TODO(danvk): is this really necessary?\n      idx : i + boundaryIdStart\n    };\n    points.push(point);\n  }\n  this.onPointsCreated_(series, points);\n  return points;\n};\n\n/**\n * Callback called for each series after the series points have been generated\n * which will later be used by the plotters to draw the graph.\n * Here data may be added to the seriesPoints which is needed by the plotters.\n * The indexes of series and points are in sync meaning the original data\n * sample for series[i] is points[i].\n * \n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *     data format where series[i] = [x,y,{extras}].\n * @param {!Array.<Dygraph.PointType>} points The corresponding points passed \n *     to the plotter.\n * @protected\n */\nhandler.prototype.onPointsCreated_ = function(series, points) {\n};\n\n/**\n * Calculates the rolling average of a data set.\n * \n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *          data format where series[i] = [x,y,{extras}].\n * @param {!number} rollPeriod The number of points over which to average the data\n * @param {!DygraphOptions} options The dygraph options.\n * @return {!Array.<[!number,?number,?]>} the rolled series.\n */\nhandler.prototype.rollingAverage = function(series, rollPeriod, options) {\n};\n\n/**\n * Computes the range of the data series (including confidence intervals).\n * \n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *     data format where series[i] = [x, y, {extras}].\n * @param {!Array.<number>} dateWindow The x-value range to display with \n *     the format: [min, max].\n * @param {!DygraphOptions} options The dygraph options.\n * @return {Array.<number>} The low and high extremes of the series in the\n *     given window with the format: [low, high].\n */\nhandler.prototype.getExtremeYValues = function(series, dateWindow, options) {\n};\n\n/**\n * Callback called for each series after the layouting data has been\n * calculated before the series is drawn. Here normalized positioning data\n * should be calculated for the extras of each point.\n * \n * @param {!Array.<Dygraph.PointType>} points The points passed to \n *          the plotter.\n * @param {!Object} axis The axis on which the series will be plotted.\n * @param {!boolean} logscale Weather or not to use a logscale.\n */\nhandler.prototype.onLineEvaluated = function(points, axis, logscale) {\n};\n\n/**\n * Helper method that computes the y value of a line defined by the points p1\n * and p2 and a given x value.\n * \n * @param {!Array.<number>} p1 left point ([x,y]).\n * @param {!Array.<number>} p2 right point ([x,y]).\n * @param {!number} xValue The x value to compute the y-intersection for.\n * @return {number} corresponding y value to x on the line defined by p1 and p2.\n * @private\n */\nhandler.prototype.computeYInterpolation_ = function(p1, p2, xValue) {\n  var deltaY = p2[1] - p1[1];\n  var deltaX = p2[0] - p1[0];\n  var gradient = deltaY / deltaX;\n  var growth = (xValue - p1[0]) * gradient;\n  return p1[1] + growth;\n};\n\n/**\n * Helper method that returns the first and the last index of the given series\n * that lie inside the given dateWindow.\n * \n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *     data format where series[i] = [x,y,{extras}].\n * @param {!Array.<number>} dateWindow The x-value range to display with \n *     the format: [min,max].\n * @return {!Array.<[!number,?number,?]>} The samples of the series that \n *     are in the given date window.\n * @private\n */\nhandler.prototype.getIndexesInWindow_ = function(series, dateWindow) {\n  var firstIdx = 0, lastIdx = series.length - 1;\n  if (dateWindow) {\n    var idx = 0;\n    var low = dateWindow[0];\n    var high = dateWindow[1];\n\n    // Start from each side of the array to minimize the performance\n    // needed.\n    while (idx < series.length - 1 && series[idx][0] < low) {\n      firstIdx++;\n      idx++;\n    }\n    idx = series.length - 1;\n    while (idx > 0 && series[idx][0] > high) {\n      lastIdx--;\n      idx--;\n    }\n  }\n  if (firstIdx <= lastIdx) {\n    return [ firstIdx, lastIdx ];\n  } else {\n    return [ 0, series.length - 1 ];\n  }\n};\n\n/**\n * Optimized replacement for parseFloat, which was way too slow when almost\n * all values were type number, with few edge cases, none of which were strings.\n * @param {?number} val\n * @return {number}\n * @protected\n */\nhandler.parseFloat = function(val) {\n  // parseFloat(null) is NaN\n  if (val === null) {\n    return NaN;\n  }\n\n  // Assume it's a number or NaN. If it's something else, I'll be shocked.\n  return val;\n};\n\n})();\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler default implementation used for simple line charts.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n(function() {\n\n/*global Dygraph:false */\n\"use strict\";\n\n/**\n * @constructor\n * @extends Dygraph.DataHandler\n */\nDygraph.DataHandlers.DefaultHandler = function() {\n};\n\nvar DefaultHandler = Dygraph.DataHandlers.DefaultHandler;\nDefaultHandler.prototype = new Dygraph.DataHandler();\n\n/** @inheritDoc */\nDefaultHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var logScale = options.get('logscale');\n  for ( var j = 0; j < rawData.length; j++) {\n    var x = rawData[j][0];\n    var point = rawData[j][i];\n    if (logScale) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point <= 0) {\n        point = null;\n      }\n    }\n    series.push([ x, point ]);\n  }\n  return series;\n};\n\n/** @inheritDoc */\nDefaultHandler.prototype.rollingAverage = function(originalData, rollPeriod,\n    options) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n\n  var i, j, y, sum, num_ok;\n  // Calculate the rolling average for the first rollPeriod - 1 points\n  // where\n  // there is not enough data to roll over the full number of points\n  if (rollPeriod == 1) {\n    return originalData;\n  }\n  for (i = 0; i < originalData.length; i++) {\n    sum = 0;\n    num_ok = 0;\n    for (j = Math.max(0, i - rollPeriod + 1); j < i + 1; j++) {\n      y = originalData[j][1];\n      if (y === null || isNaN(y))\n        continue;\n      num_ok++;\n      sum += originalData[j][1];\n    }\n    if (num_ok) {\n      rollingData[i] = [ originalData[i][0], sum / num_ok ];\n    } else {\n      rollingData[i] = [ originalData[i][0], null ];\n    }\n  }\n\n  return rollingData;\n};\n\n/** @inheritDoc */\nDefaultHandler.prototype.getExtremeYValues = function(series, dateWindow,\n    options) {\n  var minY = null, maxY = null, y;\n  var firstIdx = 0, lastIdx = series.length - 1;\n\n  for ( var j = firstIdx; j <= lastIdx; j++) {\n    y = series[j][1];\n    if (y === null || isNaN(y))\n      continue;\n    if (maxY === null || y > maxY) {\n      maxY = y;\n    }\n    if (minY === null || y < minY) {\n      minY = y;\n    }\n  }\n  return [ minY, maxY ];\n};\n\n})();\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler implementation for the fractions option.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n(function() {\n\n/*global Dygraph:false */\n\"use strict\";\n\n/**\n * @extends Dygraph.DataHandlers.DefaultHandler\n * @constructor\n */\nDygraph.DataHandlers.DefaultFractionHandler = function() {\n};\n  \nvar DefaultFractionHandler = Dygraph.DataHandlers.DefaultFractionHandler;\nDefaultFractionHandler.prototype = new Dygraph.DataHandlers.DefaultHandler();\n\nDefaultFractionHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point, num, den, value;\n  var mult = 100.0;\n  var logScale = options.get('logscale');\n  for ( var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      num = point[0];\n      den = point[1];\n      if (num !== null && !isNaN(num)) {\n        value = den ? num / den : 0.0;\n        y = mult * value;\n        // preserve original values in extras for further filtering\n        series.push([ x, y, [ num, den ] ]);\n      } else {\n        series.push([ x, num, [ num, den ] ]);\n      }\n    } else {\n      series.push([ x, null, [ null, null ] ]);\n    }\n  }\n  return series;\n};\n\nDefaultFractionHandler.prototype.rollingAverage = function(originalData, rollPeriod,\n    options) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n\n  var i;\n  var num = 0;\n  var den = 0; // numerator/denominator\n  var mult = 100.0;\n  for (i = 0; i < originalData.length; i++) {\n    num += originalData[i][2][0];\n    den += originalData[i][2][1];\n    if (i - rollPeriod >= 0) {\n      num -= originalData[i - rollPeriod][2][0];\n      den -= originalData[i - rollPeriod][2][1];\n    }\n\n    var date = originalData[i][0];\n    var value = den ? num / den : 0.0;\n    rollingData[i] = [ date, mult * value ];\n  }\n\n  return rollingData;\n};\n\n})();\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler base implementation for the \"bar\" \n * data formats. This implementation must be extended and the\n * extractSeries and rollingAverage must be implemented.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n(function() {\n\n/*global Dygraph:false */\n/*global DygraphLayout:false */\n\"use strict\";\n\n/**\n * @constructor\n * @extends {Dygraph.DataHandler}\n */\nDygraph.DataHandlers.BarsHandler = function() {\n  Dygraph.DataHandler.call(this);\n};\nDygraph.DataHandlers.BarsHandler.prototype = new Dygraph.DataHandler();\n\n// alias for the rest of the implementation\nvar BarsHandler = Dygraph.DataHandlers.BarsHandler;\n\n// TODO(danvk): figure out why the jsdoc has to be copy/pasted from superclass.\n//   (I get closure compiler errors if this isn't here.)\n/**\n * @override\n * @param {!Array.<Array>} rawData The raw data passed into dygraphs where \n *     rawData[i] = [x,ySeries1,...,ySeriesN].\n * @param {!number} seriesIndex Index of the series to extract. All other\n *     series should be ignored.\n * @param {!DygraphOptions} options Dygraph options.\n * @return {Array.<[!number,?number,?]>} The series in the unified data format\n *     where series[i] = [x,y,{extras}]. \n */\nBarsHandler.prototype.extractSeries = function(rawData, seriesIndex, options) {\n  // Not implemented here must be extended\n};\n\n/**\n * @override\n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *          data format where series[i] = [x,y,{extras}].\n * @param {!number} rollPeriod The number of points over which to average the data\n * @param {!DygraphOptions} options The dygraph options.\n * TODO(danvk): be more specific than \"Array\" here.\n * @return {!Array.<[!number,?number,?]>} the rolled series.\n */\nBarsHandler.prototype.rollingAverage =\n    function(series, rollPeriod, options) {\n  // Not implemented here, must be extended.\n};\n\n/** @inheritDoc */\nBarsHandler.prototype.onPointsCreated_ = function(series, points) {\n  for (var i = 0; i < series.length; ++i) {\n    var item = series[i];\n    var point = points[i];\n    point.y_top = NaN;\n    point.y_bottom = NaN;\n    point.yval_minus = Dygraph.DataHandler.parseFloat(item[2][0]);\n    point.yval_plus = Dygraph.DataHandler.parseFloat(item[2][1]);\n  }\n};\n\n/** @inheritDoc */\nBarsHandler.prototype.getExtremeYValues = function(series, dateWindow, options) {\n  var minY = null, maxY = null, y;\n\n  var firstIdx = 0;\n  var lastIdx = series.length - 1;\n\n  for ( var j = firstIdx; j <= lastIdx; j++) {\n    y = series[j][1];\n    if (y === null || isNaN(y)) continue;\n\n    var low = series[j][2][0];\n    var high = series[j][2][1];\n\n    if (low > y) low = y; // this can happen with custom bars,\n    if (high < y) high = y; // e.g. in tests/custom-bars.html\n\n    if (maxY === null || high > maxY) maxY = high;\n    if (minY === null || low < minY) minY = low;\n  }\n\n  return [ minY, maxY ];\n};\n\n/** @inheritDoc */\nBarsHandler.prototype.onLineEvaluated = function(points, axis, logscale) {\n  var point;\n  for (var j = 0; j < points.length; j++) {\n    // Copy over the error terms\n    point = points[j];\n    point.y_top = DygraphLayout.calcYNormal_(axis, point.yval_minus, logscale);\n    point.y_bottom = DygraphLayout.calcYNormal_(axis, point.yval_plus, logscale);\n  }\n};\n\n})();\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler implementation for the error bars option.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n(function() {\n\n/*global Dygraph:false */\n\"use strict\";\n\n/**\n * @constructor\n * @extends Dygraph.DataHandlers.BarsHandler\n */\nDygraph.DataHandlers.ErrorBarsHandler = function() {\n};\n\nvar ErrorBarsHandler = Dygraph.DataHandlers.ErrorBarsHandler;\nErrorBarsHandler.prototype = new Dygraph.DataHandlers.BarsHandler();\n\n/** @inheritDoc */\nErrorBarsHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, variance, point;\n  var sigma = options.get(\"sigma\");\n  var logScale = options.get('logscale');\n  for ( var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[0] - sigma * point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      y = point[0];\n      if (y !== null && !isNaN(y)) {\n        variance = sigma * point[1];\n        // preserve original error value in extras for further\n        // filtering\n        series.push([ x, y, [ y - variance, y + variance, point[1] ] ]);\n      } else {\n        series.push([ x, y, [ y, y, y ] ]);\n      }\n    } else {\n      series.push([ x, null, [ null, null, null ] ]);\n    }\n  }\n  return series;\n};\n\n/** @inheritDoc */\nErrorBarsHandler.prototype.rollingAverage =\n    function(originalData, rollPeriod, options) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  var sigma = options.get(\"sigma\");\n\n  var i, j, y, v, sum, num_ok, stddev, variance, value;\n\n  // Calculate the rolling average for the first rollPeriod - 1 points\n  // where there is not enough data to roll over the full number of points\n  for (i = 0; i < originalData.length; i++) {\n    sum = 0;\n    variance = 0;\n    num_ok = 0;\n    for (j = Math.max(0, i - rollPeriod + 1); j < i + 1; j++) {\n      y = originalData[j][1];\n      if (y === null || isNaN(y))\n        continue;\n      num_ok++;\n      sum += y;\n      variance += Math.pow(originalData[j][2][2], 2);\n    }\n    if (num_ok) {\n      stddev = Math.sqrt(variance) / num_ok;\n      value = sum / num_ok;\n      rollingData[i] = [ originalData[i][0], value,\n          [value - sigma * stddev, value + sigma * stddev] ];\n    } else {\n      // This explicitly preserves NaNs to aid with \"independent\n      // series\".\n      // See testRollingAveragePreservesNaNs.\n      v = (rollPeriod == 1) ? originalData[i][1] : null;\n      rollingData[i] = [ originalData[i][0], v, [ v, v ] ];\n    }\n  }\n\n  return rollingData;\n};\n\n})();\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler implementation for the custom bars option.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n(function() {\n\n/*global Dygraph:false */\n\"use strict\";\n\n/**\n * @constructor\n * @extends Dygraph.DataHandlers.BarsHandler\n */\nDygraph.DataHandlers.CustomBarsHandler = function() {\n};\n\nvar CustomBarsHandler = Dygraph.DataHandlers.CustomBarsHandler;\nCustomBarsHandler.prototype = new Dygraph.DataHandlers.BarsHandler();\n\n/** @inheritDoc */\nCustomBarsHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point;\n  var logScale = options.get('logscale');\n  for ( var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0 || point[2] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      y = point[1];\n      if (y !== null && !isNaN(y)) {\n        series.push([ x, y, [ point[0], point[2] ] ]);\n      } else {\n        series.push([ x, y, [ y, y ] ]);\n      }\n    } else {\n      series.push([ x, null, [ null, null ] ]);\n    }\n  }\n  return series;\n};\n\n/** @inheritDoc */\nCustomBarsHandler.prototype.rollingAverage =\n    function(originalData, rollPeriod, options) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  var y, low, high, mid,count, i, extremes;\n\n  low = 0;\n  mid = 0;\n  high = 0;\n  count = 0;\n  for (i = 0; i < originalData.length; i++) {\n    y = originalData[i][1];\n    extremes = originalData[i][2];\n    rollingData[i] = originalData[i];\n\n    if (y !== null && !isNaN(y)) {\n      low += extremes[0];\n      mid += y;\n      high += extremes[1];\n      count += 1;\n    }\n    if (i - rollPeriod >= 0) {\n      var prev = originalData[i - rollPeriod];\n      if (prev[1] !== null && !isNaN(prev[1])) {\n        low -= prev[2][0];\n        mid -= prev[1];\n        high -= prev[2][1];\n        count -= 1;\n      }\n    }\n    if (count) {\n      rollingData[i] = [\n          originalData[i][0],\n          1.0 * mid / count, \n          [ 1.0 * low / count,\n            1.0 * high / count ] ];\n    } else {\n      rollingData[i] = [ originalData[i][0], null, [ null, null ] ];\n    }\n  }\n\n  return rollingData;\n};\n\n})();\n","/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler implementation for the combination \n * of error bars and fractions options.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n(function() {\n\n/*global Dygraph:false */\n\"use strict\";\n\n/**\n * @constructor\n * @extends Dygraph.DataHandlers.BarsHandler\n */\nDygraph.DataHandlers.FractionsBarsHandler = function() {\n};\n\nvar FractionsBarsHandler = Dygraph.DataHandlers.FractionsBarsHandler;\nFractionsBarsHandler.prototype = new Dygraph.DataHandlers.BarsHandler();\n\n/** @inheritDoc */\nFractionsBarsHandler.prototype.extractSeries = function(rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var x, y, point, num, den, value, stddev, variance;\n  var mult = 100.0;\n  var sigma = options.get(\"sigma\");\n  var logScale = options.get('logscale');\n  for ( var j = 0; j < rawData.length; j++) {\n    x = rawData[j][0];\n    point = rawData[j][i];\n    if (logScale && point !== null) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point[0] <= 0 || point[1] <= 0) {\n        point = null;\n      }\n    }\n    // Extract to the unified data format.\n    if (point !== null) {\n      num = point[0];\n      den = point[1];\n      if (num !== null && !isNaN(num)) {\n        value = den ? num / den : 0.0;\n        stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;\n        variance = mult * stddev;\n        y = mult * value;\n        // preserve original values in extras for further filtering\n        series.push([ x, y, [ y - variance, y + variance, num, den ] ]);\n      } else {\n        series.push([ x, num, [ num, num, num, den ] ]);\n      }\n    } else {\n      series.push([ x, null, [ null, null, null, null ] ]);\n    }\n  }\n  return series;\n};\n\n/** @inheritDoc */\nFractionsBarsHandler.prototype.rollingAverage =\n    function(originalData, rollPeriod, options) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  var sigma = options.get(\"sigma\");\n  var wilsonInterval = options.get(\"wilsonInterval\");\n\n  var low, high, i, stddev;\n  var num = 0;\n  var den = 0; // numerator/denominator\n  var mult = 100.0;\n  for (i = 0; i < originalData.length; i++) {\n    num += originalData[i][2][2];\n    den += originalData[i][2][3];\n    if (i - rollPeriod >= 0) {\n      num -= originalData[i - rollPeriod][2][2];\n      den -= originalData[i - rollPeriod][2][3];\n    }\n\n    var date = originalData[i][0];\n    var value = den ? num / den : 0.0;\n    if (wilsonInterval) {\n      // For more details on this confidence interval, see:\n      // http://en.wikipedia.org/wiki/Binomial_confidence_interval\n      if (den) {\n        var p = value < 0 ? 0 : value, n = den;\n        var pm = sigma * Math.sqrt(p * (1 - p) / n + sigma * sigma / (4 * n * n));\n        var denom = 1 + sigma * sigma / den;\n        low = (p + sigma * sigma / (2 * den) - pm) / denom;\n        high = (p + sigma * sigma / (2 * den) + pm) / denom;\n        rollingData[i] = [ date, p * mult,\n            [ low * mult, high * mult ] ];\n      } else {\n        rollingData[i] = [ date, 0, [ 0, 0 ] ];\n      }\n    } else {\n      stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;\n      rollingData[i] = [ date, mult * value, \n                         [ mult * (value - stddev), mult * (value + stddev) ] ];\n    }\n  }\n\n  return rollingData;\n};\n\n})();\n"],"sourceRoot":"/source/"}